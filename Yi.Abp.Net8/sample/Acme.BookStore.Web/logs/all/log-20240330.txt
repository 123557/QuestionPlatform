2024-03-30 10:49:30.587 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-30 10:49:35.829 +08:00 [INF] Loaded ABP modules:
2024-03-30 10:49:35.830 +08:00 [INF] - Acme.BookStore.Web.YiAbpWebModule
2024-03-30 10:49:35.830 +08:00 [INF]   - Acme.BookStore.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-30 10:49:35.830 +08:00 [INF]     - Acme.BookStore.Domain.YiAbpDomainModule
2024-03-30 10:49:35.830 +08:00 [INF]       - Acme.BookStore.Domain.Shared.YiAbpDomainSharedModule
2024-03-30 10:49:35.830 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-30 10:49:35.830 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-30 10:49:35.830 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-30 10:49:35.830 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-30 10:49:35.830 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-30 10:49:35.830 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-30 10:49:35.830 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-30 10:49:35.830 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-30 10:49:35.830 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-30 10:49:35.830 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-30 10:49:35.830 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-30 10:49:35.830 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-30 10:49:35.830 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-30 10:49:35.830 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-30 10:49:35.830 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-30 10:49:35.830 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-30 10:49:35.830 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-30 10:49:35.830 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-30 10:49:35.830 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-30 10:49:35.830 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-30 10:49:35.830 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-30 10:49:35.830 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-30 10:49:35.830 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingModule
2024-03-30 10:49:35.830 +08:00 [INF]               - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-30 10:49:35.830 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-30 10:49:35.830 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-30 10:49:35.830 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.Validation.AbpValidationModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-30 10:49:35.830 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-30 10:49:35.830 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-30 10:49:35.830 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-30 10:49:35.830 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-30 10:49:35.830 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-30 10:49:35.830 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-30 10:49:35.830 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-30 10:49:35.830 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-30 10:49:35.830 +08:00 [INF]   - Acme.BookStore.Application.YiAbpApplicationModule
2024-03-30 10:49:35.830 +08:00 [INF]     - Acme.BookStore.Application.Contracts.YiAbpApplicationContractsModule
2024-03-30 10:49:35.830 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-30 10:49:35.830 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-30 10:49:35.830 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-30 10:49:35.830 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-30 10:49:35.830 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-30 10:49:35.830 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-30 10:49:35.830 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-30 10:49:35.830 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-30 10:49:35.830 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-30 10:49:35.830 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-30 10:49:35.830 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-30 10:49:35.830 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-30 10:49:35.830 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-30 10:49:35.830 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-30 10:49:35.830 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-30 10:49:35.830 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-30 10:49:35.830 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-30 10:49:35.830 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-30 10:49:35.830 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-30 10:49:35.830 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-30 10:49:35.830 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-30 10:49:35.830 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-30 10:49:35.830 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-30 10:49:35.830 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-30 10:49:35.837 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-30 10:49:35.844 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-30 10:49:36.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:36.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:36.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-30 10:49:36.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-03-30 10:49:36.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-03-30 10:49:36.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-03-30 10:49:36.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-03-30 10:49:36.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-03-30 10:49:36.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-03-30 10:49:36.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-03-30 10:49:36.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-03-30 10:49:36.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-03-30 10:49:36.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-03-30 10:49:36.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:36.919 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.919 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-30 10:49:36.921 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:36.929 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:36.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-30 10:49:36.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-03-30 10:49:36.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-03-30 10:49:36.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-03-30 10:49:36.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-03-30 10:49:36.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-03-30 10:49:36.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-03-30 10:49:36.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-03-30 10:49:36.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:36.944 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-30 10:49:36.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:36.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:36.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-30 10:49:36.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-03-30 10:49:36.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-03-30 10:49:36.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-03-30 10:49:36.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-03-30 10:49:36.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 10:49:36.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 10:49:36.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-03-30 10:49:36.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-03-30 10:49:36.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-03-30 10:49:36.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-03-30 10:49:36.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-03-30 10:49:36.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-03-30 10:49:36.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-03-30 10:49:36.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-03-30 10:49:36.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:36.967 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-30 10:49:36.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:36.975 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:36.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-30 10:49:36.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-03-30 10:49:36.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-03-30 10:49:36.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-03-30 10:49:36.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-03-30 10:49:36.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-03-30 10:49:36.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-03-30 10:49:36.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-03-30 10:49:36.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-03-30 10:49:36.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-03-30 10:49:36.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-03-30 10:49:36.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-03-30 10:49:36.985 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:36.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-30 10:49:36.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:36.999 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:36.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-30 10:49:37.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-03-30 10:49:37.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-03-30 10:49:37.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-03-30 10:49:37.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-03-30 10:49:37.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-03-30 10:49:37.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-03-30 10:49:37.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-03-30 10:49:37.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-30 10:49:37.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.022 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.022 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.027 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.027 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-30 10:49:37.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-03-30 10:49:37.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-03-30 10:49:37.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-03-30 10:49:37.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-30 10:49:37.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.043 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-30 10:49:37.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-03-30 10:49:37.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-03-30 10:49:37.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-03-30 10:49:37.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-03-30 10:49:37.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-03-30 10:49:37.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-03-30 10:49:37.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-30 10:49:37.069 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-30 10:49:37.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-03-30 10:49:37.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-03-30 10:49:37.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-03-30 10:49:37.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-03-30 10:49:37.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 10:49:37.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 10:49:37.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-03-30 10:49:37.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-03-30 10:49:37.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-03-30 10:49:37.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-03-30 10:49:37.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-03-30 10:49:37.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-03-30 10:49:37.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-03-30 10:49:37.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-03-30 10:49:37.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-03-30 10:49:37.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-03-30 10:49:37.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-03-30 10:49:37.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-03-30 10:49:37.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.093 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-30 10:49:37.094 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.103 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.108 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.109 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-30 10:49:37.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-03-30 10:49:37.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-03-30 10:49:37.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-03-30 10:49:37.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-30 10:49:37.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.125 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-30 10:49:37.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-03-30 10:49:37.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-03-30 10:49:37.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-03-30 10:49:37.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-03-30 10:49:37.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 10:49:37.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 10:49:37.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-03-30 10:49:37.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-03-30 10:49:37.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-03-30 10:49:37.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-03-30 10:49:37.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-03-30 10:49:37.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-03-30 10:49:37.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-30 10:49:37.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.150 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-30 10:49:37.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-03-30 10:49:37.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-03-30 10:49:37.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-03-30 10:49:37.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-03-30 10:49:37.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-30 10:49:37.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-30 10:49:37.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-03-30 10:49:37.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-03-30 10:49:37.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-03-30 10:49:37.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-03-30 10:49:37.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 10:49:37.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 10:49:37.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-03-30 10:49:37.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-03-30 10:49:37.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-03-30 10:49:37.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-03-30 10:49:37.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-03-30 10:49:37.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-03-30 10:49:37.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-03-30 10:49:37.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-30 10:49:37.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-30 10:49:37.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-03-30 10:49:37.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-03-30 10:49:37.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-30 10:49:37.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.204 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.206 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.206 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-30 10:49:37.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-03-30 10:49:37.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-03-30 10:49:37.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-03-30 10:49:37.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-03-30 10:49:37.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-03-30 10:49:37.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-03-30 10:49:37.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-03-30 10:49:37.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-03-30 10:49:37.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-03-30 10:49:37.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-03-30 10:49:37.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-03-30 10:49:37.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-03-30 10:49:37.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-03-30 10:49:37.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-03-30 10:49:37.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-03-30 10:49:37.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-03-30 10:49:37.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-03-30 10:49:37.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-03-30 10:49:37.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-03-30 10:49:37.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 10:49:37.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 10:49:37.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-03-30 10:49:37.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-03-30 10:49:37.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-03-30 10:49:37.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.224 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-30 10:49:37.226 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-30 10:49:37.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-03-30 10:49:37.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-03-30 10:49:37.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-03-30 10:49:37.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-03-30 10:49:37.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-30 10:49:37.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-30 10:49:37.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-03-30 10:49:37.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-03-30 10:49:37.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-03-30 10:49:37.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-03-30 10:49:37.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-30 10:49:37.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.271 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.272 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-30 10:49:37.279 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-03-30 10:49:37.279 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-30 10:49:37.287 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.292 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.297 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-30 10:49:37.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.299 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.304 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-30 10:49:37.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-30 10:49:37.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-03-30 10:49:37.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-03-30 10:49:37.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-03-30 10:49:37.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-03-30 10:49:37.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-03-30 10:49:37.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-03-30 10:49:37.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-03-30 10:49:37.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-03-30 10:49:37.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-03-30 10:49:37.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-30 10:49:37.326 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.338 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-30 10:49:37.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-30 10:49:37.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.357 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.357 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-30 10:49:37.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-03-30 10:49:37.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-03-30 10:49:37.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-03-30 10:49:37.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-03-30 10:49:37.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-03-30 10:49:37.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-03-30 10:49:37.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-30 10:49:37.367 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-30 10:49:37.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-03-30 10:49:37.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-03-30 10:49:37.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-03-30 10:49:37.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.384 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-30 10:49:37.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.391 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-30 10:49:37.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-03-30 10:49:37.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-03-30 10:49:37.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-30 10:49:37.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-30 10:49:37.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-03-30 10:49:37.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-30 10:49:37.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-30 10:49:37.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-30 10:49:37.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.453 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-30 10:49:37.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-03-30 10:49:37.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-03-30 10:49:37.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.463 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.468 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-30 10:49:37.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.476 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-30 10:49:37.484 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-03-30 10:49:37.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-03-30 10:49:37.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-03-30 10:49:37.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 10:49:37.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-30 10:49:37.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.499 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.504 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-30 10:49:37.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-30 10:49:37.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-30 10:49:37.523 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-03-30 10:49:37.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-30 10:49:37.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-30 10:49:37.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.549 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-30 10:49:37.551 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-30 10:49:37.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-03-30 10:49:37.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-30 10:49:37.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-30 10:49:37.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-03-30 10:49:37.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-03-30 10:49:37.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-03-30 10:49:37.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-03-30 10:49:37.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-03-30 10:49:37.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-03-30 10:49:37.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-03-30 10:49:37.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-03-30 10:49:37.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-30 10:49:37.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.594 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.594 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-30 10:49:37.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-03-30 10:49:37.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-03-30 10:49:37.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-03-30 10:49:37.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-03-30 10:49:37.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-30 10:49:37.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.615 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('book') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('book')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Book')
===============================

2024-03-30 10:49:37.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('book') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('book')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Book')
===============================

2024-03-30 10:49:37.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 10:49:37.634 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.639 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-03-30 10:49:37.641 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 10:49:37.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-03-30 10:49:37.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 10:49:37.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.743 +08:00 [DBG] =========Yi-SQL耗时10.6078毫秒=====
2024-03-30 10:49:37.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.759 +08:00 [DBG] =========Yi-SQL耗时1.6387毫秒=====
2024-03-30 10:49:37.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.764 +08:00 [DBG] =========Yi-SQL耗时1.256毫秒=====
2024-03-30 10:49:37.768 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.771 +08:00 [DBG] =========Yi-SQL耗时3.2886毫秒=====
2024-03-30 10:49:37.774 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.777 +08:00 [DBG] =========Yi-SQL耗时2.4211毫秒=====
2024-03-30 10:49:37.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.781 +08:00 [DBG] =========Yi-SQL耗时1.7449毫秒=====
2024-03-30 10:49:37.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.789 +08:00 [DBG] =========Yi-SQL耗时3.3948毫秒=====
2024-03-30 10:49:37.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.794 +08:00 [DBG] =========Yi-SQL耗时2.1839毫秒=====
2024-03-30 10:49:37.796 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.797 +08:00 [DBG] =========Yi-SQL耗时0.4425毫秒=====
2024-03-30 10:49:37.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.799 +08:00 [DBG] =========Yi-SQL耗时0.4019毫秒=====
2024-03-30 10:49:37.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.805 +08:00 [DBG] =========Yi-SQL耗时3.2798毫秒=====
2024-03-30 10:49:37.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.809 +08:00 [DBG] =========Yi-SQL耗时1.583毫秒=====
2024-03-30 10:49:37.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.813 +08:00 [DBG] =========Yi-SQL耗时1.9819毫秒=====
2024-03-30 10:49:37.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "book"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.817 +08:00 [DBG] =========Yi-SQL耗时1.2005毫秒=====
2024-03-30 10:49:37.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "question"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 10:49:37.823 +08:00 [DBG] =========Yi-SQL耗时2.3005毫秒=====
2024-03-30 10:49:37.832 +08:00 [DBG] 耗时-1993ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-30 10:49:37.849 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.Http
2024-03-30 10:49:37.865 +08:00 [DBG] 耗时-15ms,已加载模块-Volo.Abp.AspNetCore
2024-03-30 10:49:37.921 +08:00 [DBG] 耗时-56ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-30 10:49:37.924 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-03-30 10:49:37.930 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-03-30 10:49:37.956 +08:00 [DBG] 耗时-25ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-30 10:49:37.959 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-30 10:49:38.228 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-30 10:49:38.305 +08:00 [DBG] 耗时-346ms,已加载模块-Acme.BookStore.Web
2024-03-30 10:49:38.312 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-30 10:49:38.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-03-30 10:49:38.324 +08:00 [DBG] =========Yi-SQL耗时3.7808毫秒=====
2024-03-30 10:49:42.522 +08:00 [WRN] 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
System.Exception: 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at FreeRedis.Internal.DefaultRedisSocket.Connect()
   at FreeRedis.Internal.DefaultRedisSocket.Write(CommandPacket cmd)
   at FreeRedis.RedisClient.SingleInsideAdapter.<>c__DisplayClass5_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.SingleInsideAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call(CommandPacket cmd)
   at FreeRedis.Internal.RedisClientPoolPolicy.PrevReheatConnectionPool(ObjectPool`1 pool, Int32 minPoolSize)
   --- End of inner exception stack trace ---
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.GetFree(Boolean checkAvailable)
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.Get(Nullable`1 timeout)
   at FreeRedis.RedisClient.PoolingAdapter.GetRedisSocket(CommandPacket cmd)
   at FreeRedis.RedisClient.PoolingAdapter.<>c__DisplayClass10_0`1.<<AdapterCallAsync>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at FreeRedis.RedisClient.LogCallAsync[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.DistributedCache.SetAsync(String key, Byte[] value, DistributedCacheEntryOptions options, CancellationToken token)
   at Volo.Abp.Caching.DistributedCache`2.<>c__DisplayClass51_0.<<SetAsync>g__SetRealCache|0>d.MoveNext()
2024-03-30 10:49:42.530 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-30 10:49:42.530 +08:00 [DBG] 耗时-4224ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-30 10:49:42.531 +08:00 [INF] ==========【312】个模块初始化执行完毕，总耗时【6684ms】==========
2024-03-30 10:49:42.634 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-30 10:49:42.635 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-30 10:49:42.635 +08:00 [INF] Hosting environment: Development
2024-03-30 10:49:42.635 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\sample\Acme.BookStore.Web
2024-03-30 10:50:32.216 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 10:50:32.241 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-03-30 10:50:32.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 10:50:32.365 +08:00 [DBG] =========Yi-SQL耗时1.031毫秒=====
2024-03-30 10:50:32.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-03-30 10:50:32.374 +08:00 [DBG] =========Yi-SQL耗时0.8356毫秒=====
2024-03-30 10:50:32.409 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:50:32.434 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 191.2216ms
2024-03-30 10:50:32.435 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 10:50:32.441 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/config
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 226
- Actions:
  - Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (119 ms.)
    {"input":{"configName":null,"configKey":null,"startTime":null,"endTime":null,"sorting":null,"skipCount":0,"maxResultCount":10}}

2024-03-30 10:50:46.061 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 10:50:46.064 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 10:50:46.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 10:50:46.079 +08:00 [DBG] =========Yi-SQL耗时0.9515毫秒=====
2024-03-30 10:50:46.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-03-30 10:50:46.084 +08:00 [DBG] =========Yi-SQL耗时0.9702毫秒=====
2024-03-30 10:50:46.097 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:50:46.101 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 36.7719ms
2024-03-30 10:50:46.101 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 10:50:46.102 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/dictionary
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 41
- Actions:
  - Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (22 ms.)
    {"input":{"dictType":null,"dictLabel":null,"state":null,"sorting":null,"skipCount":0,"maxResultCount":10}}

2024-03-30 10:51:24.361 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:51:24.364 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:51:24.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:51:24.373 +08:00 [DBG] =========Yi-SQL耗时0.7155毫秒=====
2024-03-30 10:51:24.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 10:51:24.377 +08:00 [DBG] =========Yi-SQL耗时1.3079毫秒=====
2024-03-30 10:51:24.388 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:51:24.393 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 28.5528ms
2024-03-30 10:51:24.393 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:51:24.393 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 32
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (18 ms.)
    {"input":{"sorting":null,"skipCount":0,"maxResultCount":10}}

2024-03-30 10:51:41.704 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:51:41.705 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:51:41.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:51:41.708 +08:00 [DBG] =========Yi-SQL耗时0.9585毫秒=====
2024-03-30 10:51:41.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 10:51:41.711 +08:00 [DBG] =========Yi-SQL耗时0.7053毫秒=====
2024-03-30 10:51:41.712 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:51:41.712 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 7.5835ms
2024-03-30 10:51:41.712 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:51:41.712 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 8
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":1,"maxResultCount":10}}

2024-03-30 10:51:47.147 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:51:47.147 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:51:47.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:51:47.150 +08:00 [DBG] =========Yi-SQL耗时0.9298毫秒=====
2024-03-30 10:51:47.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 10
===============================

2024-03-30 10:51:47.152 +08:00 [DBG] =========Yi-SQL耗时0.5382毫秒=====
2024-03-30 10:51:47.153 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:51:47.153 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 5.7992ms
2024-03-30 10:51:47.153 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:51:47.153 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 6
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":2,"maxResultCount":10}}

2024-03-30 10:51:51.144 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:51:51.144 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:51:51.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:51:51.147 +08:00 [DBG] =========Yi-SQL耗时0.8314毫秒=====
2024-03-30 10:51:51.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 20
===============================

2024-03-30 10:51:51.149 +08:00 [DBG] =========Yi-SQL耗时0.5484毫秒=====
2024-03-30 10:51:51.150 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:51:51.150 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 5.9461ms
2024-03-30 10:51:51.150 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:51:51.150 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 6
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":3,"maxResultCount":10}}

2024-03-30 10:51:53.987 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:51:53.987 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:51:53.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:51:53.990 +08:00 [DBG] =========Yi-SQL耗时1.0721毫秒=====
2024-03-30 10:51:53.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 10:51:53.993 +08:00 [DBG] =========Yi-SQL耗时0.8356毫秒=====
2024-03-30 10:51:53.994 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:51:53.994 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 6.438ms
2024-03-30 10:51:53.994 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:51:53.994 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 7
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":1,"maxResultCount":10}}

2024-03-30 10:52:03.253 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:52:03.253 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:52:03.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:52:03.256 +08:00 [DBG] =========Yi-SQL耗时0.6211毫秒=====
2024-03-30 10:52:03.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 1 offset 0
===============================

2024-03-30 10:52:03.259 +08:00 [DBG] =========Yi-SQL耗时0.8087毫秒=====
2024-03-30 10:52:03.260 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:52:03.260 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 6.7807ms
2024-03-30 10:52:03.260 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:52:03.260 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 7
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":0,"maxResultCount":1}}

2024-03-30 10:52:09.484 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:52:09.485 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:52:09.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:52:09.487 +08:00 [DBG] =========Yi-SQL耗时0.7284毫秒=====
2024-03-30 10:52:09.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 10:52:09.490 +08:00 [DBG] =========Yi-SQL耗时0.7497毫秒=====
2024-03-30 10:52:09.491 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:52:09.491 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 5.9985ms
2024-03-30 10:52:09.491 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:52:09.491 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 6
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":"1","skipCount":0,"maxResultCount":10}}

2024-03-30 10:55:44.080 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:55:44.080 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:55:44.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:55:44.137 +08:00 [DBG] =========Yi-SQL耗时55.8329毫秒=====
2024-03-30 10:55:44.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 10
===============================

2024-03-30 10:55:44.142 +08:00 [DBG] =========Yi-SQL耗时0.8507毫秒=====
2024-03-30 10:55:44.142 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:55:44.143 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 62.6519ms
2024-03-30 10:55:44.143 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:55:44.143 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 63
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (62 ms.)
    {"input":{"sorting":null,"skipCount":2,"maxResultCount":10}}

2024-03-30 10:55:53.942 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:55:53.942 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:55:53.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:55:53.944 +08:00 [DBG] =========Yi-SQL耗时0.732毫秒=====
2024-03-30 10:55:53.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 90
===============================

2024-03-30 10:55:53.947 +08:00 [DBG] =========Yi-SQL耗时0.6毫秒=====
2024-03-30 10:55:53.948 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:55:53.948 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 6.0437ms
2024-03-30 10:55:53.948 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:55:53.948 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 6
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":10,"maxResultCount":10}}

2024-03-30 10:55:57.769 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:55:57.770 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:55:57.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:55:57.772 +08:00 [DBG] =========Yi-SQL耗时0.7766毫秒=====
2024-03-30 10:55:57.774 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 20
===============================

2024-03-30 10:55:57.775 +08:00 [DBG] =========Yi-SQL耗时0.6471毫秒=====
2024-03-30 10:55:57.776 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:55:57.780 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 9.7044ms
2024-03-30 10:55:57.782 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:55:57.782 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 12
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":3,"maxResultCount":10}}

2024-03-30 10:56:00.491 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:56:00.491 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:56:00.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:56:00.493 +08:00 [DBG] =========Yi-SQL耗时0.9038毫秒=====
2024-03-30 10:56:00.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 10:56:00.496 +08:00 [DBG] =========Yi-SQL耗时0.5816毫秒=====
2024-03-30 10:56:00.497 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:56:00.497 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 6.1723ms
2024-03-30 10:56:00.497 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:56:00.497 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 7
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":1,"maxResultCount":10}}

2024-03-30 10:56:15.621 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:56:15.621 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:56:15.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:56:15.624 +08:00 [DBG] =========Yi-SQL耗时0.7462毫秒=====
2024-03-30 10:56:15.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 10:56:15.627 +08:00 [DBG] =========Yi-SQL耗时0.6385毫秒=====
2024-03-30 10:56:15.627 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:56:15.628 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 6.3839ms
2024-03-30 10:56:15.628 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:56:15.628 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 7
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":"2","skipCount":1,"maxResultCount":10}}

2024-03-30 10:56:21.430 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:56:21.431 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:56:21.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:56:21.433 +08:00 [DBG] =========Yi-SQL耗时0.7035毫秒=====
2024-03-30 10:56:21.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 10:56:21.436 +08:00 [DBG] =========Yi-SQL耗时0.9926毫秒=====
2024-03-30 10:56:21.437 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:56:21.438 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 7.1365ms
2024-03-30 10:56:21.438 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:56:21.438 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 8
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (6 ms.)
    {"input":{"sorting":"2","skipCount":0,"maxResultCount":10}}

2024-03-30 10:56:24.183 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:56:24.184 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:56:24.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:56:24.186 +08:00 [DBG] =========Yi-SQL耗时0.8719毫秒=====
2024-03-30 10:56:24.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 10
===============================

2024-03-30 10:56:24.189 +08:00 [DBG] =========Yi-SQL耗时0.6601毫秒=====
2024-03-30 10:56:24.189 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:56:24.189 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 5.5622ms
2024-03-30 10:56:24.189 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:56:24.189 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 6
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":"2","skipCount":2,"maxResultCount":10}}

2024-03-30 10:56:28.143 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:56:28.143 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:56:28.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:56:28.145 +08:00 [DBG] =========Yi-SQL耗时0.5737毫秒=====
2024-03-30 10:56:28.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 10
===============================

2024-03-30 10:56:28.154 +08:00 [DBG] =========Yi-SQL耗时6.7239毫秒=====
2024-03-30 10:56:28.155 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:56:28.156 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 12.6925ms
2024-03-30 10:56:28.157 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:56:28.160 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 17
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (11 ms.)
    {"input":{"sorting":"2","skipCount":2,"maxResultCount":10}}

2024-03-30 10:56:30.936 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:56:30.936 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 10:56:30.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 10:56:30.938 +08:00 [DBG] =========Yi-SQL耗时0.6364毫秒=====
2024-03-30 10:56:30.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 10
===============================

2024-03-30 10:56:30.941 +08:00 [DBG] =========Yi-SQL耗时0.858毫秒=====
2024-03-30 10:56:30.941 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:56:30.942 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 5.8694ms
2024-03-30 10:56:30.942 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:56:30.942 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 6
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":2,"maxResultCount":10}}

2024-03-30 10:59:40.661 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:59:40.663 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.QuestionAppService (Acme.BookStore.Application).
2024-03-30 10:59:40.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-03-30 10:59:40.669 +08:00 [DBG] =========Yi-SQL耗时1.6592毫秒=====
2024-03-30 10:59:40.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-03-30 10:59:40.676 +08:00 [DBG] =========Yi-SQL耗时0.4868毫秒=====
2024-03-30 10:59:40.683 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 10:59:40.688 +08:00 [INF] Executed action Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application) in 24.0598ms
2024-03-30 10:59:40.688 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 10:59:40.688 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/question
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 27
- Actions:
  - Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (18 ms.)
    {"input":{"sorting":null,"skipCount":0,"maxResultCount":10}}

2024-03-30 11:00:00.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-03-30 11:00:00.038 +08:00 [DBG] =========Yi-SQL耗时8.3939毫秒=====
2024-03-30 11:00:00.274 +08:00 [WRN] UnitOfWorkManager.Current is null! Can not publish the event.
2024-03-30 11:00:00.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "interestrecords"  
           ("id","creationtime","comparisonvalue","value","isfluctuate")
     VALUES
           (N'8d463c75-e857-160b-fc4e-3a119f79948d',CAST('2024-03-30 11:00:00.274' AS DATETIME),1702.90,1.3045651535615714369604791827,0) ;
===============================

2024-03-30 11:00:00.299 +08:00 [DBG] =========Yi-SQL耗时10.5393毫秒=====
2024-03-30 11:00:18.882 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:00:18.883 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.QuestionAppService (Acme.BookStore.Application).
2024-03-30 11:00:18.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-03-30 11:00:18.885 +08:00 [DBG] =========Yi-SQL耗时0.7197毫秒=====
2024-03-30 11:00:18.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-03-30 11:00:18.893 +08:00 [DBG] =========Yi-SQL耗时4.0044毫秒=====
2024-03-30 11:00:18.894 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:00:18.894 +08:00 [INF] Executed action Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application) in 11.6454ms
2024-03-30 11:00:18.894 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:00:18.894 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/question
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 12
- Actions:
  - Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (11 ms.)
    {"input":{"sorting":"ase","skipCount":0,"maxResultCount":10}}

2024-03-30 11:00:28.330 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:00:28.331 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.QuestionAppService (Acme.BookStore.Application).
2024-03-30 11:00:28.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-03-30 11:00:28.333 +08:00 [DBG] =========Yi-SQL耗时0.7099毫秒=====
2024-03-30 11:00:28.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-03-30 11:00:28.336 +08:00 [DBG] =========Yi-SQL耗时0.75毫秒=====
2024-03-30 11:00:28.336 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:00:28.337 +08:00 [INF] Executed action Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application) in 5.9967ms
2024-03-30 11:00:28.337 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:00:28.337 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/question
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 6
- Actions:
  - Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (5 ms.)
    {"input":{"sorting":"desc","skipCount":0,"maxResultCount":10}}

2024-03-30 11:00:41.933 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:00:41.933 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.QuestionAppService (Acme.BookStore.Application).
2024-03-30 11:00:41.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-03-30 11:00:41.936 +08:00 [DBG] =========Yi-SQL耗时0.7736毫秒=====
2024-03-30 11:00:41.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-03-30 11:00:41.939 +08:00 [DBG] =========Yi-SQL耗时0.5721毫秒=====
2024-03-30 11:00:41.940 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:00:41.940 +08:00 [INF] Executed action Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application) in 6.995ms
2024-03-30 11:00:41.940 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:00:41.940 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/question
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 7
- Actions:
  - Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (6 ms.)
    {"input":{"sorting":"publishDate","skipCount":0,"maxResultCount":10}}

2024-03-30 11:00:49.285 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:00:49.285 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.QuestionAppService (Acme.BookStore.Application).
2024-03-30 11:00:49.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-03-30 11:00:49.343 +08:00 [DBG] =========Yi-SQL耗时57.2402毫秒=====
2024-03-30 11:00:49.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-03-30 11:00:49.345 +08:00 [DBG] =========Yi-SQL耗时0.8335毫秒=====
2024-03-30 11:00:49.350 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:00:49.350 +08:00 [INF] Executed action Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application) in 65.1357ms
2024-03-30 11:00:49.350 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:00:49.350 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/question
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 66
- Actions:
  - Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (63 ms.)
    {"input":{"sorting":"price","skipCount":0,"maxResultCount":10}}

2024-03-30 11:04:32.557 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:04:32.564 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.QuestionAppService (Acme.BookStore.Application).
2024-03-30 11:04:32.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-03-30 11:04:32.575 +08:00 [DBG] =========Yi-SQL耗时1.3823毫秒=====
2024-03-30 11:04:32.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "question"     LIMIT 2 offset 0
===============================

2024-03-30 11:04:32.579 +08:00 [DBG] =========Yi-SQL耗时1.1258毫秒=====
2024-03-30 11:04:32.584 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:04:32.585 +08:00 [INF] Executed action Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application) in 17.1239ms
2024-03-30 11:04:32.585 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:04:32.585 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/question
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 28
- Actions:
  - Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (13 ms.)
    {"input":{"sorting":"price","skipCount":1,"maxResultCount":2}}

2024-03-30 11:04:45.405 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:04:45.405 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:04:45.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:04:45.408 +08:00 [DBG] =========Yi-SQL耗时1.5394毫秒=====
2024-03-30 11:04:45.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 2 offset 0
===============================

2024-03-30 11:04:45.411 +08:00 [DBG] =========Yi-SQL耗时1.0578毫秒=====
2024-03-30 11:04:45.412 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:04:45.412 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 7.1333ms
2024-03-30 11:04:45.413 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:04:45.413 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 8
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (6 ms.)
    {"input":{"sorting":null,"skipCount":1,"maxResultCount":2}}

2024-03-30 11:04:50.562 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:04:50.562 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:04:50.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:04:50.564 +08:00 [DBG] =========Yi-SQL耗时0.6783毫秒=====
2024-03-30 11:04:50.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 1 offset 0
===============================

2024-03-30 11:04:50.567 +08:00 [DBG] =========Yi-SQL耗时1.1574毫秒=====
2024-03-30 11:04:50.568 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:04:50.568 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 5.6579ms
2024-03-30 11:04:50.568 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:04:50.568 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 6
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":1,"maxResultCount":1}}

2024-03-30 11:04:53.083 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:04:53.084 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:04:53.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:04:53.086 +08:00 [DBG] =========Yi-SQL耗时0.7707毫秒=====
2024-03-30 11:04:53.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 2 offset 0
===============================

2024-03-30 11:04:53.089 +08:00 [DBG] =========Yi-SQL耗时0.6095毫秒=====
2024-03-30 11:04:53.090 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:04:53.090 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 6.4655ms
2024-03-30 11:04:53.090 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:04:53.090 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 7
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":1,"maxResultCount":2}}

2024-03-30 11:04:56.576 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:04:56.577 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:04:56.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:04:56.579 +08:00 [DBG] =========Yi-SQL耗时0.6836毫秒=====
2024-03-30 11:04:56.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 3 offset 0
===============================

2024-03-30 11:04:56.582 +08:00 [DBG] =========Yi-SQL耗时0.5928毫秒=====
2024-03-30 11:04:56.583 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:04:56.588 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 9.358ms
2024-03-30 11:04:56.588 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:04:56.588 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 12
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":1,"maxResultCount":3}}

2024-03-30 11:04:59.878 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:04:59.878 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:04:59.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:04:59.880 +08:00 [DBG] =========Yi-SQL耗时0.6071毫秒=====
2024-03-30 11:04:59.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 1 offset 0
===============================

2024-03-30 11:04:59.884 +08:00 [DBG] =========Yi-SQL耗时1.0051毫秒=====
2024-03-30 11:04:59.885 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:04:59.885 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 6.4642ms
2024-03-30 11:04:59.885 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:04:59.885 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 7
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (6 ms.)
    {"input":{"sorting":null,"skipCount":1,"maxResultCount":1}}

2024-03-30 11:05:04.985 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:05:04.985 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:05:04.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:05:04.989 +08:00 [DBG] =========Yi-SQL耗时0.9706毫秒=====
2024-03-30 11:05:04.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 2 offset 0
===============================

2024-03-30 11:05:04.992 +08:00 [DBG] =========Yi-SQL耗时0.6383毫秒=====
2024-03-30 11:05:04.994 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:05:04.994 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 8.4694ms
2024-03-30 11:05:04.994 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:05:04.994 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 9
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (7 ms.)
    {"input":{"sorting":null,"skipCount":1,"maxResultCount":2}}

2024-03-30 11:05:08.045 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:05:08.045 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:05:08.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:05:08.049 +08:00 [DBG] =========Yi-SQL耗时1.1918毫秒=====
2024-03-30 11:05:08.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 2 offset 2
===============================

2024-03-30 11:05:08.052 +08:00 [DBG] =========Yi-SQL耗时0.7306毫秒=====
2024-03-30 11:05:08.052 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:05:08.053 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 7.6948ms
2024-03-30 11:05:08.053 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:05:08.053 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 8
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (7 ms.)
    {"input":{"sorting":null,"skipCount":2,"maxResultCount":2}}

2024-03-30 11:05:11.427 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:05:11.427 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:05:11.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:05:11.430 +08:00 [DBG] =========Yi-SQL耗时0.5791毫秒=====
2024-03-30 11:05:11.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 2 offset 0
===============================

2024-03-30 11:05:11.440 +08:00 [DBG] =========Yi-SQL耗时1.3237毫秒=====
2024-03-30 11:05:11.442 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:05:11.443 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 15.8897ms
2024-03-30 11:05:11.443 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:05:11.443 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 16
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (14 ms.)
    {"input":{"sorting":null,"skipCount":1,"maxResultCount":2}}

2024-03-30 11:05:16.283 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:05:16.283 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:05:16.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:05:16.285 +08:00 [DBG] =========Yi-SQL耗时0.608毫秒=====
2024-03-30 11:05:16.287 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 1 offset 0
===============================

2024-03-30 11:05:16.288 +08:00 [DBG] =========Yi-SQL耗时0.5048毫秒=====
2024-03-30 11:05:16.288 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:05:16.289 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 5.6342ms
2024-03-30 11:05:16.289 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:05:16.289 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 6
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":null,"skipCount":1,"maxResultCount":1}}

2024-03-30 11:05:20.884 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:05:20.884 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:05:20.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:05:20.886 +08:00 [DBG] =========Yi-SQL耗时0.592毫秒=====
2024-03-30 11:05:20.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 1 offset 1
===============================

2024-03-30 11:05:20.895 +08:00 [DBG] =========Yi-SQL耗时4.7691毫秒=====
2024-03-30 11:05:20.897 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:05:20.899 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 14.0866ms
2024-03-30 11:05:20.899 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:05:20.899 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 15
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (12 ms.)
    {"input":{"sorting":null,"skipCount":2,"maxResultCount":1}}

2024-03-30 11:43:00.830 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:43:00.839 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:43:00.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:43:01.002 +08:00 [DBG] =========Yi-SQL耗时116.8782毫秒=====
2024-03-30 11:43:01.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 11:43:01.007 +08:00 [DBG] =========Yi-SQL耗时2.2101毫秒=====
2024-03-30 11:43:01.013 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:43:01.014 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 174.7916ms
2024-03-30 11:43:01.014 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:43:01.015 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 186
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (152 ms.)
    {"input":{"sorting":null,"skipCount":0,"maxResultCount":10}}

2024-03-30 11:53:28.013 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:53:28.013 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:53:28.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:53:28.088 +08:00 [DBG] =========Yi-SQL耗时70.8084毫秒=====
2024-03-30 11:53:28.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 11:53:28.091 +08:00 [DBG] =========Yi-SQL耗时2.7587毫秒=====
2024-03-30 11:53:28.099 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:53:28.107 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 93.7155ms
2024-03-30 11:53:28.107 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:53:28.107 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 96
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (83 ms.)
    {"input":{"sorting":"price ASC","skipCount":0,"maxResultCount":10}}

2024-03-30 11:54:21.436 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:54:21.436 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:54:21.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:54:21.439 +08:00 [DBG] =========Yi-SQL耗时0.8189毫秒=====
2024-03-30 11:54:21.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 11:54:21.445 +08:00 [DBG] =========Yi-SQL耗时0.655毫秒=====
2024-03-30 11:54:21.447 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:54:21.448 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 12.1712ms
2024-03-30 11:54:21.449 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:54:21.449 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 13
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (10 ms.)
    {"input":{"sorting":"price ASC","skipCount":0,"maxResultCount":10}}

2024-03-30 11:54:27.751 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:54:27.751 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:54:27.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:54:27.758 +08:00 [DBG] =========Yi-SQL耗时3.7123毫秒=====
2024-03-30 11:54:27.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 11:54:27.764 +08:00 [DBG] =========Yi-SQL耗时2.7717毫秒=====
2024-03-30 11:54:27.766 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:54:27.766 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 15.4217ms
2024-03-30 11:54:27.766 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:54:27.766 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 16
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (14 ms.)
    {"input":{"sorting":"price DESC","skipCount":0,"maxResultCount":10}}

2024-03-30 11:54:37.266 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:54:37.266 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:54:37.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:54:37.269 +08:00 [DBG] =========Yi-SQL耗时0.7204毫秒=====
2024-03-30 11:54:37.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 11:54:37.274 +08:00 [DBG] =========Yi-SQL耗时3.8923毫秒=====
2024-03-30 11:54:37.276 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:54:37.276 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 9.8152ms
2024-03-30 11:54:37.276 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:54:37.276 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 10
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (9 ms.)
    {"input":{"sorting":"price ASC","skipCount":0,"maxResultCount":10}}

2024-03-30 11:54:42.264 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:54:42.265 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:54:42.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:54:42.267 +08:00 [DBG] =========Yi-SQL耗时0.6553毫秒=====
2024-03-30 11:54:42.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 11:54:42.269 +08:00 [DBG] =========Yi-SQL耗时0.3737毫秒=====
2024-03-30 11:54:42.270 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:54:42.270 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 5.1965ms
2024-03-30 11:54:42.270 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:54:42.270 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 6
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (4 ms.)
    {"input":{"sorting":null,"skipCount":0,"maxResultCount":10}}

2024-03-30 11:55:06.460 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:55:06.460 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:55:06.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:55:06.463 +08:00 [DBG] =========Yi-SQL耗时0.9844毫秒=====
2024-03-30 11:55:06.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 11:55:06.465 +08:00 [DBG] =========Yi-SQL耗时0.51毫秒=====
2024-03-30 11:55:06.466 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:55:06.467 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 7.0414ms
2024-03-30 11:55:06.467 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:55:06.467 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 7
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":"price","skipCount":0,"maxResultCount":10}}

2024-03-30 11:55:13.840 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:55:13.841 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:55:13.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:55:13.843 +08:00 [DBG] =========Yi-SQL耗时0.6325毫秒=====
2024-03-30 11:55:13.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 11:55:13.846 +08:00 [DBG] =========Yi-SQL耗时0.463毫秒=====
2024-03-30 11:55:13.846 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:55:13.846 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 5.9006ms
2024-03-30 11:55:13.847 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:55:13.847 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 6
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (5 ms.)
    {"input":{"sorting":"price ASC","skipCount":0,"maxResultCount":10}}

2024-03-30 11:55:19.249 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:55:19.249 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 11:55:19.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 11:55:19.253 +08:00 [DBG] =========Yi-SQL耗时0.6918毫秒=====
2024-03-30 11:55:19.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 11:55:19.255 +08:00 [DBG] =========Yi-SQL耗时1.0736毫秒=====
2024-03-30 11:55:19.258 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 11:55:19.258 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 8.6992ms
2024-03-30 11:55:19.258 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 11:55:19.258 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 9
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (7 ms.)
    {"input":{"sorting":"price DESC","skipCount":0,"maxResultCount":10}}

2024-03-30 12:00:00.094 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-03-30 12:00:00.161 +08:00 [DBG] =========Yi-SQL耗时67.3508毫秒=====
2024-03-30 12:00:00.374 +08:00 [WRN] UnitOfWorkManager.Current is null! Can not publish the event.
2024-03-30 12:00:00.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "interestrecords"  
           ("id","creationtime","comparisonvalue","value","isfluctuate")
     VALUES
           (N'222662db-6a73-7ab3-1f0f-3a119fb08372',CAST('2024-03-30 12:00:00.374' AS DATETIME),1702.90,1.3045651535615714369604791827,0) ;
===============================

2024-03-30 12:00:00.395 +08:00 [DBG] =========Yi-SQL耗时13.6997毫秒=====
2024-03-30 12:14:04.008 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 12:14:04.011 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 12:15:30.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 12:15:33.440 +08:00 [DBG] =========Yi-SQL耗时7971.1867毫秒=====
2024-03-30 12:15:33.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 12:15:33.459 +08:00 [DBG] =========Yi-SQL耗时14.8277毫秒=====
2024-03-30 12:19:59.411 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-30 12:20:03.419 +08:00 [INF] Loaded ABP modules:
2024-03-30 12:20:03.420 +08:00 [INF] - Acme.BookStore.Web.YiAbpWebModule
2024-03-30 12:20:03.420 +08:00 [INF]   - Acme.BookStore.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-30 12:20:03.420 +08:00 [INF]     - Acme.BookStore.Domain.YiAbpDomainModule
2024-03-30 12:20:03.420 +08:00 [INF]       - Acme.BookStore.Domain.Shared.YiAbpDomainSharedModule
2024-03-30 12:20:03.420 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-30 12:20:03.420 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-30 12:20:03.420 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-30 12:20:03.420 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-30 12:20:03.420 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-30 12:20:03.420 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-30 12:20:03.420 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-30 12:20:03.420 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-30 12:20:03.420 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-30 12:20:03.420 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-30 12:20:03.420 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-30 12:20:03.420 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-30 12:20:03.420 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-30 12:20:03.420 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-30 12:20:03.420 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-30 12:20:03.420 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-30 12:20:03.420 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-30 12:20:03.420 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-30 12:20:03.420 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-30 12:20:03.420 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-30 12:20:03.420 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-30 12:20:03.420 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-30 12:20:03.420 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingModule
2024-03-30 12:20:03.420 +08:00 [INF]               - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-30 12:20:03.420 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-30 12:20:03.420 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-30 12:20:03.420 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.Validation.AbpValidationModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-30 12:20:03.420 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-30 12:20:03.420 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-30 12:20:03.420 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-30 12:20:03.420 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-30 12:20:03.420 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-30 12:20:03.420 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-30 12:20:03.420 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-30 12:20:03.420 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-30 12:20:03.420 +08:00 [INF]   - Acme.BookStore.Application.YiAbpApplicationModule
2024-03-30 12:20:03.420 +08:00 [INF]     - Acme.BookStore.Application.Contracts.YiAbpApplicationContractsModule
2024-03-30 12:20:03.420 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-30 12:20:03.420 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-30 12:20:03.420 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-30 12:20:03.420 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-30 12:20:03.420 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-30 12:20:03.420 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-30 12:20:03.420 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-30 12:20:03.420 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-30 12:20:03.420 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-30 12:20:03.420 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-30 12:20:03.420 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-30 12:20:03.420 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-30 12:20:03.420 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-30 12:20:03.420 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-30 12:20:03.420 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-30 12:20:03.420 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-30 12:20:03.420 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-30 12:20:03.420 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-30 12:20:03.420 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-30 12:20:03.420 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-30 12:20:03.420 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-30 12:20:03.420 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-30 12:20:03.420 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-30 12:20:03.420 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-30 12:20:03.425 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-30 12:20:03.429 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-30 12:20:04.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.109 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-30 12:20:04.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-03-30 12:20:04.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-03-30 12:20:04.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-03-30 12:20:04.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-03-30 12:20:04.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-03-30 12:20:04.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-03-30 12:20:04.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-03-30 12:20:04.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-03-30 12:20:04.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-03-30 12:20:04.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-03-30 12:20:04.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-30 12:20:04.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.150 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-30 12:20:04.153 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-03-30 12:20:04.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-03-30 12:20:04.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-03-30 12:20:04.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-03-30 12:20:04.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-03-30 12:20:04.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-03-30 12:20:04.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-03-30 12:20:04.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-30 12:20:04.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-30 12:20:04.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-03-30 12:20:04.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-03-30 12:20:04.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-03-30 12:20:04.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-03-30 12:20:04.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 12:20:04.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 12:20:04.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-03-30 12:20:04.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-03-30 12:20:04.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-03-30 12:20:04.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-03-30 12:20:04.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-03-30 12:20:04.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-03-30 12:20:04.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-03-30 12:20:04.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-03-30 12:20:04.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.182 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-30 12:20:04.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-30 12:20:04.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-03-30 12:20:04.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-03-30 12:20:04.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-03-30 12:20:04.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-03-30 12:20:04.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-03-30 12:20:04.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-03-30 12:20:04.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-03-30 12:20:04.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-03-30 12:20:04.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-03-30 12:20:04.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-03-30 12:20:04.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-03-30 12:20:04.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.204 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.204 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-30 12:20:04.205 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-30 12:20:04.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-03-30 12:20:04.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-03-30 12:20:04.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-03-30 12:20:04.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-03-30 12:20:04.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-03-30 12:20:04.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-03-30 12:20:04.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-03-30 12:20:04.221 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.226 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-30 12:20:04.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-30 12:20:04.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-03-30 12:20:04.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-03-30 12:20:04.242 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-03-30 12:20:04.242 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-30 12:20:04.249 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-30 12:20:04.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-03-30 12:20:04.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-03-30 12:20:04.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-03-30 12:20:04.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-03-30 12:20:04.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-03-30 12:20:04.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-03-30 12:20:04.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.271 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.272 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-30 12:20:04.279 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-30 12:20:04.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-03-30 12:20:04.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-03-30 12:20:04.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-03-30 12:20:04.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-03-30 12:20:04.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 12:20:04.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 12:20:04.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-03-30 12:20:04.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-03-30 12:20:04.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-03-30 12:20:04.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-03-30 12:20:04.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-03-30 12:20:04.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-03-30 12:20:04.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-03-30 12:20:04.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-03-30 12:20:04.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-03-30 12:20:04.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-03-30 12:20:04.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-03-30 12:20:04.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-03-30 12:20:04.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-30 12:20:04.304 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-30 12:20:04.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-03-30 12:20:04.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-03-30 12:20:04.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-03-30 12:20:04.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-30 12:20:04.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.333 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-30 12:20:04.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-03-30 12:20:04.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-03-30 12:20:04.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-03-30 12:20:04.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-03-30 12:20:04.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 12:20:04.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 12:20:04.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-03-30 12:20:04.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-03-30 12:20:04.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-03-30 12:20:04.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-03-30 12:20:04.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-03-30 12:20:04.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-03-30 12:20:04.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-30 12:20:04.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-30 12:20:04.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-03-30 12:20:04.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-03-30 12:20:04.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-03-30 12:20:04.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-03-30 12:20:04.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.366 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.366 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-30 12:20:04.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-30 12:20:04.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-03-30 12:20:04.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-03-30 12:20:04.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-03-30 12:20:04.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-03-30 12:20:04.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 12:20:04.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 12:20:04.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-03-30 12:20:04.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-03-30 12:20:04.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-03-30 12:20:04.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-03-30 12:20:04.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-03-30 12:20:04.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-03-30 12:20:04.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-03-30 12:20:04.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-30 12:20:04.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-30 12:20:04.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-03-30 12:20:04.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-03-30 12:20:04.402 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-30 12:20:04.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.414 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-30 12:20:04.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-03-30 12:20:04.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-03-30 12:20:04.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-03-30 12:20:04.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-03-30 12:20:04.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-03-30 12:20:04.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-03-30 12:20:04.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-03-30 12:20:04.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-03-30 12:20:04.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-03-30 12:20:04.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-03-30 12:20:04.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-03-30 12:20:04.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-03-30 12:20:04.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-03-30 12:20:04.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-03-30 12:20:04.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-03-30 12:20:04.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-03-30 12:20:04.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-03-30 12:20:04.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-03-30 12:20:04.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-03-30 12:20:04.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 12:20:04.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 12:20:04.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-03-30 12:20:04.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-03-30 12:20:04.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-03-30 12:20:04.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-30 12:20:04.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-30 12:20:04.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-03-30 12:20:04.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-03-30 12:20:04.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-03-30 12:20:04.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-03-30 12:20:04.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.452 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-30 12:20:04.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-30 12:20:04.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-03-30 12:20:04.467 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-03-30 12:20:04.467 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-03-30 12:20:04.467 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-03-30 12:20:04.467 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-30 12:20:04.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.480 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-30 12:20:04.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-03-30 12:20:04.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-30 12:20:04.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-30 12:20:04.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-30 12:20:04.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.518 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.523 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-30 12:20:04.525 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-03-30 12:20:04.525 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-03-30 12:20:04.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-03-30 12:20:04.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-03-30 12:20:04.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-03-30 12:20:04.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-03-30 12:20:04.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-03-30 12:20:04.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-03-30 12:20:04.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-03-30 12:20:04.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-30 12:20:04.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-30 12:20:04.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-30 12:20:04.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-30 12:20:04.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-03-30 12:20:04.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-03-30 12:20:04.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-03-30 12:20:04.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-03-30 12:20:04.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-03-30 12:20:04.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-03-30 12:20:04.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-30 12:20:04.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-30 12:20:04.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-03-30 12:20:04.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-03-30 12:20:04.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-03-30 12:20:04.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-30 12:20:04.592 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.595 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-30 12:20:04.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-03-30 12:20:04.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-03-30 12:20:04.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.610 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-30 12:20:04.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-30 12:20:04.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-03-30 12:20:04.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-30 12:20:04.634 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.639 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.644 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-30 12:20:04.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-30 12:20:04.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-30 12:20:04.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-03-30 12:20:04.666 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-03-30 12:20:04.666 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-30 12:20:04.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.688 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-30 12:20:04.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-03-30 12:20:04.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-03-30 12:20:04.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-03-30 12:20:04.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.691 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.692 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 12:20:04.693 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-30 12:20:04.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-30 12:20:04.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-30 12:20:04.718 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-30 12:20:04.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-03-30 12:20:04.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.734 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-30 12:20:04.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.768 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.768 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-30 12:20:04.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-30 12:20:04.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.782 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-30 12:20:04.789 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-03-30 12:20:04.790 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.790 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-30 12:20:04.797 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-30 12:20:04.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-03-30 12:20:04.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-03-30 12:20:04.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-03-30 12:20:04.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-03-30 12:20:04.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-03-30 12:20:04.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-03-30 12:20:04.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-03-30 12:20:04.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-03-30 12:20:04.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.816 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-30 12:20:04.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-30 12:20:04.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-03-30 12:20:04.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-03-30 12:20:04.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-03-30 12:20:04.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-03-30 12:20:04.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-30 12:20:04.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('book') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('book')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.848 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Book')
===============================

2024-03-30 12:20:04.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('book') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('book')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.855 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Book')
===============================

2024-03-30 12:20:04.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 12:20:04.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-03-30 12:20:04.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 12:20:04.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-03-30 12:20:04.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 12:20:04.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 12:20:04.973 +08:00 [DBG] =========Yi-SQL耗时9.1802毫秒=====
2024-03-30 12:20:04.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 12:20:04.988 +08:00 [DBG] =========Yi-SQL耗时1.5508毫秒=====
2024-03-30 12:20:04.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 12:20:04.992 +08:00 [DBG] =========Yi-SQL耗时1.1728毫秒=====
2024-03-30 12:20:04.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 12:20:05.003 +08:00 [DBG] =========Yi-SQL耗时4.8459毫秒=====
2024-03-30 12:20:05.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 12:20:05.006 +08:00 [DBG] =========Yi-SQL耗时1.3793毫秒=====
2024-03-30 12:20:05.009 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 12:20:05.011 +08:00 [DBG] =========Yi-SQL耗时1.6441毫秒=====
2024-03-30 12:20:05.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 12:20:05.017 +08:00 [DBG] =========Yi-SQL耗时1.4578毫秒=====
2024-03-30 12:20:05.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 12:20:05.021 +08:00 [DBG] =========Yi-SQL耗时2.2488毫秒=====
2024-03-30 12:20:05.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 12:20:05.023 +08:00 [DBG] =========Yi-SQL耗时0.4202毫秒=====
2024-03-30 12:20:05.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 12:20:05.025 +08:00 [DBG] =========Yi-SQL耗时0.45毫秒=====
2024-03-30 12:20:05.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 12:20:05.029 +08:00 [DBG] =========Yi-SQL耗时1.6032毫秒=====
2024-03-30 12:20:05.032 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 12:20:05.033 +08:00 [DBG] =========Yi-SQL耗时1.1351毫秒=====
2024-03-30 12:20:05.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 12:20:05.036 +08:00 [DBG] =========Yi-SQL耗时1.2186毫秒=====
2024-03-30 12:20:05.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "book"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 12:20:05.040 +08:00 [DBG] =========Yi-SQL耗时1.1738毫秒=====
2024-03-30 12:20:05.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "question"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 12:20:05.045 +08:00 [DBG] =========Yi-SQL耗时1.1814毫秒=====
2024-03-30 12:20:05.053 +08:00 [DBG] 耗时-1627ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-30 12:20:05.070 +08:00 [DBG] 耗时-13ms,已加载模块-Volo.Abp.AspNetCore
2024-03-30 12:20:05.127 +08:00 [DBG] 耗时-57ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-30 12:20:05.131 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-03-30 12:20:05.136 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-03-30 12:20:05.156 +08:00 [DBG] 耗时-19ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-30 12:20:05.158 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-30 12:20:05.414 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-30 12:20:05.486 +08:00 [DBG] 耗时-327ms,已加载模块-Acme.BookStore.Web
2024-03-30 12:20:05.493 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-30 12:20:05.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-03-30 12:20:05.505 +08:00 [DBG] =========Yi-SQL耗时2.7848毫秒=====
2024-03-30 12:20:09.690 +08:00 [WRN] 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
System.Exception: 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at FreeRedis.Internal.DefaultRedisSocket.Connect()
   at FreeRedis.Internal.DefaultRedisSocket.Write(CommandPacket cmd)
   at FreeRedis.RedisClient.SingleInsideAdapter.<>c__DisplayClass5_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.SingleInsideAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call(CommandPacket cmd)
   at FreeRedis.Internal.RedisClientPoolPolicy.PrevReheatConnectionPool(ObjectPool`1 pool, Int32 minPoolSize)
   --- End of inner exception stack trace ---
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.GetFree(Boolean checkAvailable)
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.Get(Nullable`1 timeout)
   at FreeRedis.RedisClient.PoolingAdapter.GetRedisSocket(CommandPacket cmd)
   at FreeRedis.RedisClient.PoolingAdapter.<>c__DisplayClass10_0`1.<<AdapterCallAsync>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at FreeRedis.RedisClient.LogCallAsync[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.DistributedCache.SetAsync(String key, Byte[] value, DistributedCacheEntryOptions options, CancellationToken token)
   at Volo.Abp.Caching.DistributedCache`2.<>c__DisplayClass51_0.<<SetAsync>g__SetRealCache|0>d.MoveNext()
2024-03-30 12:20:09.700 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-30 12:20:09.700 +08:00 [DBG] 耗时-4213ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-30 12:20:09.701 +08:00 [INF] ==========【312】个模块初始化执行完毕，总耗时【6267ms】==========
2024-03-30 12:20:09.812 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-30 12:20:09.812 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-30 12:20:09.812 +08:00 [INF] Hosting environment: Development
2024-03-30 12:20:09.812 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\sample\Acme.BookStore.Web
2024-03-30 12:20:17.369 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 12:20:17.391 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 12:20:17.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-30 12:20:17.501 +08:00 [DBG] =========Yi-SQL耗时1.0503毫秒=====
2024-03-30 12:20:17.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-30 12:20:17.512 +08:00 [DBG] =========Yi-SQL耗时0.9283毫秒=====
2024-03-30 12:20:17.544 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 12:20:17.570 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 176.399ms
2024-03-30 12:20:17.571 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 12:20:17.578 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 208
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (109 ms.)
    {"input":{"sorting":null,"skipCount":0,"maxResultCount":10}}

2024-03-30 12:20:26.478 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 12:20:26.479 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 12:20:26.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"  ) CountTable 
===============================

2024-03-30 12:20:26.495 +08:00 [DBG] =========Yi-SQL耗时6.5671毫秒=====
2024-03-30 12:20:26.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"    ORDER BY price ASC LIMIT 10 offset 0
===============================

2024-03-30 12:20:26.497 +08:00 [DBG] =========Yi-SQL耗时0.7726毫秒=====
2024-03-30 12:20:26.498 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 12:20:26.498 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 19.5969ms
2024-03-30 12:20:26.499 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 12:20:26.499 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 20
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (16 ms.)
    {"input":{"sorting":"price ASC","skipCount":0,"maxResultCount":10}}

2024-03-30 12:20:32.229 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 12:20:32.229 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-30 12:20:32.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"  ) CountTable 
===============================

2024-03-30 12:20:32.232 +08:00 [DBG] =========Yi-SQL耗时1.1894毫秒=====
2024-03-30 12:20:32.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"    ORDER BY price DESC LIMIT 10 offset 0
===============================

2024-03-30 12:20:32.235 +08:00 [DBG] =========Yi-SQL耗时1.0264毫秒=====
2024-03-30 12:20:32.236 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 12:20:32.236 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 6.9354ms
2024-03-30 12:20:32.236 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-30 12:20:32.236 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 8
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (6 ms.)
    {"input":{"sorting":"price DESC","skipCount":0,"maxResultCount":10}}

2024-03-30 13:20:29.924 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-30 13:20:35.312 +08:00 [INF] Loaded ABP modules:
2024-03-30 13:20:35.313 +08:00 [INF] - Acme.BookStore.Web.YiAbpWebModule
2024-03-30 13:20:35.313 +08:00 [INF]   - Acme.BookStore.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-30 13:20:35.313 +08:00 [INF]     - Acme.BookStore.Domain.YiAbpDomainModule
2024-03-30 13:20:35.313 +08:00 [INF]       - Acme.BookStore.Domain.Shared.YiAbpDomainSharedModule
2024-03-30 13:20:35.313 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-30 13:20:35.313 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-30 13:20:35.313 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-30 13:20:35.313 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-30 13:20:35.313 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-30 13:20:35.313 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-30 13:20:35.313 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-30 13:20:35.313 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-30 13:20:35.313 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-30 13:20:35.313 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-30 13:20:35.313 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-30 13:20:35.313 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-30 13:20:35.313 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-30 13:20:35.313 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-30 13:20:35.313 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-30 13:20:35.313 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-30 13:20:35.313 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-30 13:20:35.313 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-30 13:20:35.313 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-30 13:20:35.313 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-30 13:20:35.313 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-30 13:20:35.313 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-30 13:20:35.313 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingModule
2024-03-30 13:20:35.313 +08:00 [INF]               - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-30 13:20:35.313 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-30 13:20:35.313 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-30 13:20:35.313 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.Validation.AbpValidationModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-30 13:20:35.313 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-30 13:20:35.313 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-30 13:20:35.313 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-30 13:20:35.313 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-30 13:20:35.313 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-30 13:20:35.313 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-30 13:20:35.313 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-30 13:20:35.313 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-30 13:20:35.313 +08:00 [INF]   - Acme.BookStore.Application.YiAbpApplicationModule
2024-03-30 13:20:35.313 +08:00 [INF]     - Acme.BookStore.Application.Contracts.YiAbpApplicationContractsModule
2024-03-30 13:20:35.313 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-30 13:20:35.313 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-30 13:20:35.313 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-30 13:20:35.313 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-30 13:20:35.313 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-30 13:20:35.313 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-30 13:20:35.313 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-30 13:20:35.313 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-30 13:20:35.313 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-30 13:20:35.313 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-30 13:20:35.313 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-30 13:20:35.313 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-30 13:20:35.313 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-30 13:20:35.313 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-30 13:20:35.313 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-30 13:20:35.313 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-30 13:20:35.313 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-30 13:20:35.313 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-30 13:20:35.313 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-30 13:20:35.313 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-30 13:20:35.313 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-30 13:20:35.313 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-30 13:20:35.313 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-30 13:20:35.313 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-30 13:20:35.319 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-30 13:20:35.323 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-30 13:20:36.027 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.063 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-30 13:20:36.071 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-03-30 13:20:36.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-03-30 13:20:36.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-03-30 13:20:36.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-03-30 13:20:36.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-03-30 13:20:36.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-03-30 13:20:36.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-03-30 13:20:36.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-03-30 13:20:36.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-03-30 13:20:36.080 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-03-30 13:20:36.080 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-30 13:20:36.094 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-30 13:20:36.109 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.109 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-03-30 13:20:36.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-03-30 13:20:36.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-03-30 13:20:36.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-03-30 13:20:36.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-03-30 13:20:36.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-03-30 13:20:36.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-03-30 13:20:36.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-30 13:20:36.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.128 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-30 13:20:36.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-03-30 13:20:36.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-03-30 13:20:36.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-03-30 13:20:36.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-03-30 13:20:36.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 13:20:36.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 13:20:36.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-03-30 13:20:36.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-03-30 13:20:36.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-03-30 13:20:36.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-03-30 13:20:36.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-03-30 13:20:36.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-03-30 13:20:36.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-03-30 13:20:36.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-03-30 13:20:36.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-30 13:20:36.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.150 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-30 13:20:36.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-03-30 13:20:36.153 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-03-30 13:20:36.153 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-03-30 13:20:36.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-03-30 13:20:36.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-03-30 13:20:36.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-03-30 13:20:36.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-03-30 13:20:36.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-03-30 13:20:36.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-03-30 13:20:36.156 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-03-30 13:20:36.156 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-03-30 13:20:36.156 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-30 13:20:36.164 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-30 13:20:36.178 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-03-30 13:20:36.178 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-03-30 13:20:36.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-03-30 13:20:36.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-03-30 13:20:36.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-03-30 13:20:36.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-03-30 13:20:36.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-03-30 13:20:36.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-30 13:20:36.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.192 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-30 13:20:36.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-03-30 13:20:36.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-03-30 13:20:36.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-03-30 13:20:36.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.205 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-30 13:20:36.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.213 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-30 13:20:36.221 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-03-30 13:20:36.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-03-30 13:20:36.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-03-30 13:20:36.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-03-30 13:20:36.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-03-30 13:20:36.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-03-30 13:20:36.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-30 13:20:36.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.242 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.249 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-30 13:20:36.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-03-30 13:20:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-03-30 13:20:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-03-30 13:20:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-03-30 13:20:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 13:20:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 13:20:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-03-30 13:20:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-03-30 13:20:36.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-03-30 13:20:36.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-03-30 13:20:36.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-03-30 13:20:36.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-03-30 13:20:36.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-03-30 13:20:36.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-03-30 13:20:36.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-03-30 13:20:36.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-03-30 13:20:36.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-03-30 13:20:36.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-03-30 13:20:36.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-30 13:20:36.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.270 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-30 13:20:36.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-03-30 13:20:36.278 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-03-30 13:20:36.278 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-03-30 13:20:36.278 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-30 13:20:36.286 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.290 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-30 13:20:36.297 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-03-30 13:20:36.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-03-30 13:20:36.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-03-30 13:20:36.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-03-30 13:20:36.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 13:20:36.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 13:20:36.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-03-30 13:20:36.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-03-30 13:20:36.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-03-30 13:20:36.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.299 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-03-30 13:20:36.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.299 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-03-30 13:20:36.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.299 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-03-30 13:20:36.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.299 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.304 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-30 13:20:36.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-30 13:20:36.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-03-30 13:20:36.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-03-30 13:20:36.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-03-30 13:20:36.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-03-30 13:20:36.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.322 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.322 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-30 13:20:36.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.335 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-30 13:20:36.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-03-30 13:20:36.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-03-30 13:20:36.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-03-30 13:20:36.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-03-30 13:20:36.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 13:20:36.338 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 13:20:36.338 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-03-30 13:20:36.338 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-03-30 13:20:36.338 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-03-30 13:20:36.338 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-03-30 13:20:36.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-03-30 13:20:36.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-03-30 13:20:36.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-03-30 13:20:36.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-30 13:20:36.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.351 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.351 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-30 13:20:36.358 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-03-30 13:20:36.358 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-03-30 13:20:36.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.363 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-30 13:20:36.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-30 13:20:36.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-03-30 13:20:36.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-03-30 13:20:36.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-03-30 13:20:36.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-03-30 13:20:36.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-03-30 13:20:36.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-03-30 13:20:36.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-03-30 13:20:36.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-03-30 13:20:36.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-03-30 13:20:36.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-03-30 13:20:36.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-03-30 13:20:36.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-03-30 13:20:36.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-03-30 13:20:36.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-03-30 13:20:36.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-03-30 13:20:36.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-03-30 13:20:36.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-03-30 13:20:36.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-03-30 13:20:36.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-03-30 13:20:36.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 13:20:36.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 13:20:36.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-03-30 13:20:36.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-03-30 13:20:36.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-03-30 13:20:36.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.383 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-30 13:20:36.391 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.402 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.403 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-30 13:20:36.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-03-30 13:20:36.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-03-30 13:20:36.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-03-30 13:20:36.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-03-30 13:20:36.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-30 13:20:36.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-30 13:20:36.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-03-30 13:20:36.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-03-30 13:20:36.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-03-30 13:20:36.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-03-30 13:20:36.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-30 13:20:36.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-30 13:20:36.463 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-03-30 13:20:36.463 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.468 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-30 13:20:36.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.476 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-30 13:20:36.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-30 13:20:36.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.499 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-30 13:20:36.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-03-30 13:20:36.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-03-30 13:20:36.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-03-30 13:20:36.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-03-30 13:20:36.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-03-30 13:20:36.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-03-30 13:20:36.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-03-30 13:20:36.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-03-30 13:20:36.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-03-30 13:20:36.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-30 13:20:36.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-30 13:20:36.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-30 13:20:36.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-30 13:20:36.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-03-30 13:20:36.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-03-30 13:20:36.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-03-30 13:20:36.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-03-30 13:20:36.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-03-30 13:20:36.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-03-30 13:20:36.543 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.549 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-30 13:20:36.551 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-30 13:20:36.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-03-30 13:20:36.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-03-30 13:20:36.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-03-30 13:20:36.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-30 13:20:36.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-30 13:20:36.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-03-30 13:20:36.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-03-30 13:20:36.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-30 13:20:36.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-30 13:20:36.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-03-30 13:20:36.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.610 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.615 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-30 13:20:36.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-30 13:20:36.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.634 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-30 13:20:36.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.641 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-30 13:20:36.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-03-30 13:20:36.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-03-30 13:20:36.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-30 13:20:36.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.669 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-30 13:20:36.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-03-30 13:20:36.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-03-30 13:20:36.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-03-30 13:20:36.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 13:20:36.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-30 13:20:36.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.686 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.692 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-30 13:20:36.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-30 13:20:36.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-30 13:20:36.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-03-30 13:20:36.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-30 13:20:36.718 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-30 13:20:36.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-30 13:20:36.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.748 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-30 13:20:36.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-03-30 13:20:36.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-30 13:20:36.757 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.766 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-30 13:20:36.768 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.768 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-03-30 13:20:36.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-03-30 13:20:36.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-03-30 13:20:36.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-03-30 13:20:36.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-03-30 13:20:36.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-03-30 13:20:36.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-03-30 13:20:36.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-03-30 13:20:36.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-30 13:20:36.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-30 13:20:36.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-03-30 13:20:36.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-03-30 13:20:36.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-03-30 13:20:36.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-03-30 13:20:36.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-30 13:20:36.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('book') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('book')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Book')
===============================

2024-03-30 13:20:36.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('book') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('book')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Book')
===============================

2024-03-30 13:20:36.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 13:20:36.839 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-03-30 13:20:36.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 13:20:36.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-03-30 13:20:36.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:20:36.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 13:20:36.955 +08:00 [DBG] =========Yi-SQL耗时9.8828毫秒=====
2024-03-30 13:20:36.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 13:20:36.971 +08:00 [DBG] =========Yi-SQL耗时1.8134毫秒=====
2024-03-30 13:20:36.974 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 13:20:36.976 +08:00 [DBG] =========Yi-SQL耗时1.5356毫秒=====
2024-03-30 13:20:36.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 13:20:36.982 +08:00 [DBG] =========Yi-SQL耗时2.4232毫秒=====
2024-03-30 13:20:36.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 13:20:36.987 +08:00 [DBG] =========Yi-SQL耗时1.6054毫秒=====
2024-03-30 13:20:36.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 13:20:36.990 +08:00 [DBG] =========Yi-SQL耗时1.036毫秒=====
2024-03-30 13:20:36.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 13:20:36.997 +08:00 [DBG] =========Yi-SQL耗时1.876毫秒=====
2024-03-30 13:20:36.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 13:20:37.001 +08:00 [DBG] =========Yi-SQL耗时1.7844毫秒=====
2024-03-30 13:20:37.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 13:20:37.003 +08:00 [DBG] =========Yi-SQL耗时0.439毫秒=====
2024-03-30 13:20:37.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 13:20:37.006 +08:00 [DBG] =========Yi-SQL耗时0.4301毫秒=====
2024-03-30 13:20:37.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 13:20:37.009 +08:00 [DBG] =========Yi-SQL耗时1.4127毫秒=====
2024-03-30 13:20:37.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 13:20:37.013 +08:00 [DBG] =========Yi-SQL耗时1.057毫秒=====
2024-03-30 13:20:37.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 13:20:37.017 +08:00 [DBG] =========Yi-SQL耗时1.6286毫秒=====
2024-03-30 13:20:37.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "book"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 13:20:37.021 +08:00 [DBG] =========Yi-SQL耗时0.6386毫秒=====
2024-03-30 13:20:37.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "question"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 13:20:37.024 +08:00 [DBG] =========Yi-SQL耗时0.7375毫秒=====
2024-03-30 13:20:37.034 +08:00 [DBG] 耗时-1713ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-30 13:20:37.051 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-03-30 13:20:37.112 +08:00 [DBG] 耗时-61ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-30 13:20:37.116 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-03-30 13:20:37.122 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-03-30 13:20:37.162 +08:00 [DBG] 耗时-39ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-30 13:20:37.168 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-30 13:20:37.519 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-30 13:20:37.662 +08:00 [DBG] 耗时-494ms,已加载模块-Acme.BookStore.Web
2024-03-30 13:20:37.700 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-30 13:20:37.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-03-30 13:20:37.761 +08:00 [DBG] =========Yi-SQL耗时39.333毫秒=====
2024-03-30 13:20:41.979 +08:00 [WRN] 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
System.Exception: 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at FreeRedis.Internal.DefaultRedisSocket.Connect()
   at FreeRedis.Internal.DefaultRedisSocket.Write(CommandPacket cmd)
   at FreeRedis.RedisClient.SingleInsideAdapter.<>c__DisplayClass5_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.SingleInsideAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call(CommandPacket cmd)
   at FreeRedis.Internal.RedisClientPoolPolicy.PrevReheatConnectionPool(ObjectPool`1 pool, Int32 minPoolSize)
   --- End of inner exception stack trace ---
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.GetFree(Boolean checkAvailable)
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.Get(Nullable`1 timeout)
   at FreeRedis.RedisClient.PoolingAdapter.GetRedisSocket(CommandPacket cmd)
   at FreeRedis.RedisClient.PoolingAdapter.<>c__DisplayClass10_0`1.<<AdapterCallAsync>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at FreeRedis.RedisClient.LogCallAsync[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.DistributedCache.SetAsync(String key, Byte[] value, DistributedCacheEntryOptions options, CancellationToken token)
   at Volo.Abp.Caching.DistributedCache`2.<>c__DisplayClass51_0.<<SetAsync>g__SetRealCache|0>d.MoveNext()
2024-03-30 13:20:41.981 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-30 13:20:41.985 +08:00 [DBG] 耗时-4322ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-30 13:20:41.985 +08:00 [INF] ==========【312】个模块初始化执行完毕，总耗时【6657ms】==========
2024-03-30 13:20:42.091 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-30 13:20:42.091 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-30 13:20:42.091 +08:00 [INF] Hosting environment: Development
2024-03-30 13:20:42.091 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\sample\Acme.BookStore.Web
2024-03-30 13:20:51.430 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:20:51.448 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:20:51.652 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-03-30 13:20:51.652 +08:00 [ERR] 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
System.Exception: 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at FreeRedis.Internal.DefaultRedisSocket.Connect()
   at FreeRedis.Internal.DefaultRedisSocket.Write(CommandPacket cmd)
   at FreeRedis.RedisClient.SingleInsideAdapter.<>c__DisplayClass5_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.SingleInsideAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call(CommandPacket cmd)
   at FreeRedis.Internal.RedisClientPoolPolicy.PrevReheatConnectionPool(ObjectPool`1 pool, Int32 minPoolSize)
   --- End of inner exception stack trace ---
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.GetFree(Boolean checkAvailable)
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.Get(Nullable`1 timeout)
   at FreeRedis.RedisClient.PoolingAdapter.GetRedisSocket(CommandPacket cmd)
   at FreeRedis.RedisClient.PoolingAdapter.<>c__DisplayClass9_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.PoolingAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Eval(String script, String[] keys, Object[] arguments)
   at FreeRedis.DistributedCache.Set(String key, Byte[] value, DistributedCacheEntryOptions options)
   at Lazy.Captcha.Core.Storeage.DefaultStorage.Set(String key, String value, DateTimeOffset absoluteExpiration)
   at Lazy.Captcha.Core.DefaultCaptcha.Generate(String captchaId, Nullable`1 expirySeconds)
   at Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\AccountService.cs:line 135
   at lambda_method1416(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-03-30 13:20:51.661 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-03-30 13:20:51.716 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 266.2042ms
2024-03-30 13:20:51.716 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:20:51.723 +08:00 [INF] AUDIT LOG: [500: GET    ] /api/app/account/captcha-image
- UserName - UserId                 :  - 
- ClientIpAddress        : ::ffff:127.0.0.1
- ExecutionDuration      : 292
- Actions:
  - Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (121 ms.)
    {}
- Exceptions:
  - 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
    System.Exception: 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at FreeRedis.Internal.DefaultRedisSocket.Connect()
   at FreeRedis.Internal.DefaultRedisSocket.Write(CommandPacket cmd)
   at FreeRedis.RedisClient.SingleInsideAdapter.<>c__DisplayClass5_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.SingleInsideAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call(CommandPacket cmd)
   at FreeRedis.Internal.RedisClientPoolPolicy.PrevReheatConnectionPool(ObjectPool`1 pool, Int32 minPoolSize)
   --- End of inner exception stack trace ---
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.GetFree(Boolean checkAvailable)
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.Get(Nullable`1 timeout)
   at FreeRedis.RedisClient.PoolingAdapter.GetRedisSocket(CommandPacket cmd)
   at FreeRedis.RedisClient.PoolingAdapter.<>c__DisplayClass9_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.PoolingAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Eval(String script, String[] keys, Object[] arguments)
   at FreeRedis.DistributedCache.Set(String key, Byte[] value, DistributedCacheEntryOptions options)
   at Lazy.Captcha.Core.Storeage.DefaultStorage.Set(String key, String value, DateTimeOffset absoluteExpiration)
   at Lazy.Captcha.Core.DefaultCaptcha.Generate(String captchaId, Nullable`1 expirySeconds)
   at Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\AccountService.cs:line 135
   at lambda_method1416(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)

2024-03-30 13:20:56.396 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:20:56.445 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 13:20:56.446 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 13:20:56.446 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 13:20:56.453 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 13:20:56.476 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:20:56.476 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 13:20:56.476 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 13:20:56.477 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 13:20:56.546 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:20:56.547 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:20:56.548 +08:00 [INF] AUDIT LOG: [404: GET    ] /api/app/tenant/select
- UserName - UserId                 :  - 
- ClientIpAddress        : ::ffff:127.0.0.1
- ExecutionDuration      : 0

2024-03-30 13:20:56.591 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-03-30 13:20:56.591 +08:00 [ERR] 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
System.Exception: 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at FreeRedis.Internal.DefaultRedisSocket.Connect()
   at FreeRedis.Internal.DefaultRedisSocket.Write(CommandPacket cmd)
   at FreeRedis.RedisClient.SingleInsideAdapter.<>c__DisplayClass5_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.SingleInsideAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call(CommandPacket cmd)
   at FreeRedis.Internal.RedisClientPoolPolicy.PrevReheatConnectionPool(ObjectPool`1 pool, Int32 minPoolSize)
   --- End of inner exception stack trace ---
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.GetFree(Boolean checkAvailable)
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.Get(Nullable`1 timeout)
   at FreeRedis.RedisClient.PoolingAdapter.GetRedisSocket(CommandPacket cmd)
   at FreeRedis.RedisClient.PoolingAdapter.<>c__DisplayClass9_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.PoolingAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Eval(String script, String[] keys, Object[] arguments)
   at FreeRedis.DistributedCache.Set(String key, Byte[] value, DistributedCacheEntryOptions options)
   at Lazy.Captcha.Core.Storeage.DefaultStorage.Set(String key, String value, DateTimeOffset absoluteExpiration)
   at Lazy.Captcha.Core.DefaultCaptcha.Generate(String captchaId, Nullable`1 expirySeconds)
   at Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\AccountService.cs:line 135
   at lambda_method1416(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-03-30 13:20:56.592 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-03-30 13:20:56.592 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 45.2634ms
2024-03-30 13:20:56.592 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:20:56.593 +08:00 [INF] AUDIT LOG: [500: GET    ] /api/app/account/captcha-image
- UserName - UserId                 :  - 
- ClientIpAddress        : ::ffff:127.0.0.1
- ExecutionDuration      : 46
- Actions:
  - Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (38 ms.)
    {}
- Exceptions:
  - 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
    System.Exception: 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at FreeRedis.Internal.DefaultRedisSocket.Connect()
   at FreeRedis.Internal.DefaultRedisSocket.Write(CommandPacket cmd)
   at FreeRedis.RedisClient.SingleInsideAdapter.<>c__DisplayClass5_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.SingleInsideAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call(CommandPacket cmd)
   at FreeRedis.Internal.RedisClientPoolPolicy.PrevReheatConnectionPool(ObjectPool`1 pool, Int32 minPoolSize)
   --- End of inner exception stack trace ---
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.GetFree(Boolean checkAvailable)
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.Get(Nullable`1 timeout)
   at FreeRedis.RedisClient.PoolingAdapter.GetRedisSocket(CommandPacket cmd)
   at FreeRedis.RedisClient.PoolingAdapter.<>c__DisplayClass9_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.PoolingAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Eval(String script, String[] keys, Object[] arguments)
   at FreeRedis.DistributedCache.Set(String key, Byte[] value, DistributedCacheEntryOptions options)
   at Lazy.Captcha.Core.Storeage.DefaultStorage.Set(String key, String value, DateTimeOffset absoluteExpiration)
   at Lazy.Captcha.Core.DefaultCaptcha.Generate(String captchaId, Nullable`1 expirySeconds)
   at Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\AccountService.cs:line 135
   at lambda_method1416(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)

