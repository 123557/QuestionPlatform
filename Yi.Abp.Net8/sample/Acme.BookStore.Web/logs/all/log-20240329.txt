2024-03-29 12:09:52.945 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-29 12:10:02.774 +08:00 [INF] Loaded ABP modules:
2024-03-29 12:10:02.775 +08:00 [INF] - Acme.BookStore.Web.YiAbpWebModule
2024-03-29 12:10:02.775 +08:00 [INF]   - Acme.BookStore.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-29 12:10:02.775 +08:00 [INF]     - Acme.BookStore.Domain.YiAbpDomainModule
2024-03-29 12:10:02.775 +08:00 [INF]       - Acme.BookStore.Domain.Shared.YiAbpDomainSharedModule
2024-03-29 12:10:02.775 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-29 12:10:02.775 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-29 12:10:02.775 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-29 12:10:02.775 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-29 12:10:02.775 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-29 12:10:02.775 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-29 12:10:02.775 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-29 12:10:02.775 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-29 12:10:02.775 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-29 12:10:02.775 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-29 12:10:02.775 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-29 12:10:02.775 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-29 12:10:02.775 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-29 12:10:02.775 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-29 12:10:02.775 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-29 12:10:02.775 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-29 12:10:02.775 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-29 12:10:02.775 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-29 12:10:02.775 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-29 12:10:02.775 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-29 12:10:02.775 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-29 12:10:02.775 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-29 12:10:02.775 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingModule
2024-03-29 12:10:02.775 +08:00 [INF]               - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-29 12:10:02.775 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-29 12:10:02.775 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-29 12:10:02.775 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.Validation.AbpValidationModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-29 12:10:02.775 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-29 12:10:02.775 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-29 12:10:02.775 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-29 12:10:02.775 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-29 12:10:02.775 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-29 12:10:02.775 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-29 12:10:02.775 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-29 12:10:02.775 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-29 12:10:02.775 +08:00 [INF]   - Acme.BookStore.Application.YiAbpApplicationModule
2024-03-29 12:10:02.775 +08:00 [INF]     - Acme.BookStore.Application.Contracts.YiAbpApplicationContractsModule
2024-03-29 12:10:02.775 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-29 12:10:02.775 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-29 12:10:02.775 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-29 12:10:02.775 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-29 12:10:02.775 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-29 12:10:02.775 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-29 12:10:02.775 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-29 12:10:02.775 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-29 12:10:02.775 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-29 12:10:02.775 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-29 12:10:02.775 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-29 12:10:02.775 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-29 12:10:02.775 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-29 12:10:02.775 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-29 12:10:02.775 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-29 12:10:02.775 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-29 12:10:02.775 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-29 12:10:02.775 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-29 12:10:02.775 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-29 12:10:02.775 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-29 12:10:02.775 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-29 12:10:02.775 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-29 12:10:02.775 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-29 12:10:02.775 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-29 12:10:02.781 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-29 12:10:02.786 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=test
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-29 12:10:03.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "operationlog"(
"id" uuid NOT NULL  ,
"title" varchar(255) DEFAULT NULL  ,
"opertype" int4 NOT NULL  ,
"requestmethod" varchar(255) DEFAULT NULL  ,
"operuser" varchar(255) DEFAULT NULL  ,
"operip" varchar(255) DEFAULT NULL  ,
"operlocation" varchar(255) DEFAULT NULL  ,
"method" varchar(255) DEFAULT NULL  ,
"requestparam" varchar(255) DEFAULT NULL  ,
"requestresult" varchar(9999) DEFAULT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-03-29 12:10:03.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-03-29 12:10:03.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-03-29 12:10:03.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-03-29 12:10:03.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-03-29 12:10:03.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-03-29 12:10:03.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-03-29 12:10:03.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-03-29 12:10:03.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-03-29 12:10:03.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-03-29 12:10:03.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-29 12:10:03.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "config"(
"id" uuid NOT NULL  ,
"configname" varchar(255) NOT NULL  ,
"configkey" varchar(255) NOT NULL  ,
"configvalue" varchar(255) NOT NULL  ,
"configtype" varchar(255) DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"remark" varchar(255) DEFAULT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-03-29 12:10:03.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-03-29 12:10:03.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-03-29 12:10:03.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-03-29 12:10:03.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-03-29 12:10:03.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-03-29 12:10:03.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-03-29 12:10:03.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-29 12:10:03.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "dept"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean NOT NULL  ,
"deptname" varchar(255) NOT NULL  ,
"deptcode" varchar(255) NOT NULL  ,
"leader" varchar(255) DEFAULT NULL  ,
"parentid" uuid NOT NULL  ,
"remark" varchar(255) DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-03-29 12:10:03.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:10:03.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-03-29 12:10:03.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-03-29 12:10:03.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 12:10:03.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 12:10:03.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-03-29 12:10:03.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-03-29 12:10:03.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-03-29 12:10:03.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-03-29 12:10:03.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-03-29 12:10:03.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-03-29 12:10:03.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-03-29 12:10:03.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-03-29 12:10:03.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-29 12:10:03.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "dictionary"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean NOT NULL  ,
"remark" varchar(255) DEFAULT NULL  ,
"listclass" varchar(255) DEFAULT NULL  ,
"cssclass" varchar(255) DEFAULT NULL  ,
"dicttype" varchar(255) NOT NULL  ,
"dictlabel" varchar(255) DEFAULT NULL  ,
"dictvalue" varchar(255) NOT NULL  ,
"isdefault" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-03-29 12:10:03.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:10:03.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-03-29 12:10:03.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-03-29 12:10:03.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-03-29 12:10:03.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-03-29 12:10:03.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-03-29 12:10:03.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-03-29 12:10:03.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-03-29 12:10:03.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-03-29 12:10:03.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-03-29 12:10:03.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-29 12:10:03.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "dictionarytype"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean DEFAULT NULL  ,
"dictname" varchar(255) NOT NULL  ,
"dicttype" varchar(255) NOT NULL  ,
"remark" varchar(255) DEFAULT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"concurrencystamp" varchar(255) NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-03-29 12:10:03.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:10:03.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-03-29 12:10:03.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-03-29 12:10:03.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-03-29 12:10:03.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-03-29 12:10:03.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-03-29 12:10:03.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.713 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.719 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-29 12:10:03.721 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "file"(
"id" uuid NOT NULL  ,
"filesize" numeric NOT NULL  ,
"filename" varchar(255) NOT NULL  ,
"filepath" varchar(255) NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"concurrencystamp" varchar(255) NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-03-29 12:10:03.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-03-29 12:10:03.734 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-03-29 12:10:03.734 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-29 12:10:03.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.747 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.748 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "loginlog"(
"id" uuid NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"loginuser" varchar(255) DEFAULT NULL  ,
"loginlocation" varchar(255) DEFAULT NULL  ,
"loginip" varchar(255) DEFAULT NULL  ,
"browser" varchar(255) DEFAULT NULL  ,
"os" varchar(255) DEFAULT NULL  ,
"logmsg" varchar(255) DEFAULT NULL  ,
"creatorid" uuid DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.753 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-03-29 12:10:03.753 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-03-29 12:10:03.753 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-03-29 12:10:03.753 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-03-29 12:10:03.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-03-29 12:10:03.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-03-29 12:10:03.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:10:03.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_LoginUser ON "loginlog"("loginuser" Asc)
===============================

2024-03-29 12:10:03.767 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.767 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-29 12:10:03.774 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "menu"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean NOT NULL  ,
"menuname" varchar(255) NOT NULL  ,
"menutype" int4 NOT NULL  ,
"permissioncode" varchar(255) DEFAULT NULL  ,
"parentid" uuid NOT NULL  ,
"menuicon" varchar(255) DEFAULT NULL  ,
"router" varchar(255) DEFAULT NULL  ,
"islink" boolean NOT NULL  ,
"iscache" boolean NOT NULL  ,
"isshow" boolean NOT NULL  ,
"remark" varchar(255) DEFAULT NULL  ,
"component" varchar(255) DEFAULT NULL  ,
"query" varchar(255) DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-03-29 12:10:03.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:10:03.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-03-29 12:10:03.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-03-29 12:10:03.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 12:10:03.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 12:10:03.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-03-29 12:10:03.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-03-29 12:10:03.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-03-29 12:10:03.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-03-29 12:10:03.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-03-29 12:10:03.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-03-29 12:10:03.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-03-29 12:10:03.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-03-29 12:10:03.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-03-29 12:10:03.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-03-29 12:10:03.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-03-29 12:10:03.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-03-29 12:10:03.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-29 12:10:03.797 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "notice"(
"id" uuid NOT NULL  ,
"title" varchar(255) NOT NULL  ,
"type" int4 NOT NULL  ,
"content" text NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-03-29 12:10:03.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-03-29 12:10:03.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-03-29 12:10:03.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-29 12:10:03.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "post"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean NOT NULL  ,
"postcode" varchar(255) NOT NULL  ,
"postname" varchar(255) NOT NULL  ,
"remark" varchar(255) DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-03-29 12:10:03.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:10:03.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-03-29 12:10:03.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-03-29 12:10:03.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 12:10:03.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 12:10:03.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-03-29 12:10:03.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-03-29 12:10:03.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-03-29 12:10:03.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-03-29 12:10:03.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-03-29 12:10:03.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-03-29 12:10:03.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-29 12:10:03.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.840 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "roledept"(
"id" uuid NOT NULL  ,
"roleid" uuid NOT NULL  ,
"deptid" uuid NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-03-29 12:10:03.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-03-29 12:10:03.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-03-29 12:10:03.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-03-29 12:10:03.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-29 12:10:03.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.856 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "role"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"rolename" varchar(255) NOT NULL  ,
"rolecode" varchar(255) NOT NULL  ,
"remark" varchar(255) DEFAULT NULL  ,
"datascope" int4 NOT NULL  ,
"state" boolean NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-03-29 12:10:03.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:10:03.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-03-29 12:10:03.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-03-29 12:10:03.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 12:10:03.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 12:10:03.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-03-29 12:10:03.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-03-29 12:10:03.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-03-29 12:10:03.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-03-29 12:10:03.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-03-29 12:10:03.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-03-29 12:10:03.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-03-29 12:10:03.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.868 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-29 12:10:03.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "rolemenu"(
"id" uuid NOT NULL  ,
"roleid" uuid NOT NULL  ,
"menuid" uuid NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:10:03.884 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-03-29 12:10:03.884 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-03-29 12:10:03.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-29 12:10:03.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:10:03.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:10:03.909 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-29 12:10:03.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:10:03.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
ALTER TABLE "user" ADD COLUMN "isdeleted" boolean NOT NULL  
===============================

2024-03-29 12:10:04.049 +08:00 [FTL] Yi框架-Abp.vNext，爆炸！
Volo.Abp.AbpInitializationException: An error occurred during the initialize Volo.Abp.Modularity.OnPreApplicationInitializationModuleLifecycleContributor phase of the module Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule, Yi.Framework.SqlSugarCore, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null: UserEntity 创建失败,请认真检查 1、属性需要get set 2、特殊类型需要加Ignore 具体错误内容： 23502: column "isdeleted" of relation "user" contains null values. See the inner exception for details.
 ---> System.Exception: UserEntity 创建失败,请认真检查 1、属性需要get set 2、特殊类型需要加Ignore 具体错误内容： 23502: column "isdeleted" of relation "user" contains null values
   at SqlSugar.CodeFirstProvider.InitTables(Type[] entityTypes)
   at Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule.CodeFirst(IServiceProvider service) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.SqlSugarCore\YiFrameworkSqlSugarCoreModule.cs:line 100
   at Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule.OnPreApplicationInitializationAsync(ApplicationInitializationContext context) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.SqlSugarCore\YiFrameworkSqlSugarCoreModule.cs:line 73
   at Volo.Abp.Modularity.OnPreApplicationInitializationModuleLifecycleContributor.InitializeAsync(ApplicationInitializationContext context, IAbpModule module)
   at Yi.Framework.Core.Modularity.YiModuleManager.InitializeModulesAsync(ApplicationInitializationContext context) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.Core\Modularity\YiModuleManager.cs:line 39
   --- End of inner exception stack trace ---
   at Yi.Framework.Core.Modularity.YiModuleManager.InitializeModulesAsync(ApplicationInitializationContext context) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.Core\Modularity\YiModuleManager.cs:line 51
   at Volo.Abp.AbpApplicationBase.InitializeModulesAsync()
   at Volo.Abp.AbpApplicationWithExternalServiceProvider.InitializeAsync(IServiceProvider serviceProvider)
   at Microsoft.AspNetCore.Builder.AbpApplicationBuilderExtensions.InitializeApplicationAsync(IApplicationBuilder app)
   at Program.<Main>$(String[] args) in D:\vs_space\Yi\Yi.Abp.Net8\sample\Acme.BookStore.Web\Program.cs:line 27
2024-03-29 12:14:19.817 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-29 12:14:25.564 +08:00 [INF] Loaded ABP modules:
2024-03-29 12:14:25.565 +08:00 [INF] - Acme.BookStore.Web.YiAbpWebModule
2024-03-29 12:14:25.565 +08:00 [INF]   - Acme.BookStore.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-29 12:14:25.565 +08:00 [INF]     - Acme.BookStore.Domain.YiAbpDomainModule
2024-03-29 12:14:25.565 +08:00 [INF]       - Acme.BookStore.Domain.Shared.YiAbpDomainSharedModule
2024-03-29 12:14:25.565 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-29 12:14:25.565 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-29 12:14:25.565 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-29 12:14:25.565 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-29 12:14:25.565 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-29 12:14:25.565 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-29 12:14:25.565 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-29 12:14:25.565 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-29 12:14:25.565 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-29 12:14:25.565 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-29 12:14:25.565 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-29 12:14:25.565 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-29 12:14:25.565 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-29 12:14:25.565 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-29 12:14:25.565 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-29 12:14:25.565 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-29 12:14:25.565 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-29 12:14:25.565 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-29 12:14:25.565 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-29 12:14:25.565 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-29 12:14:25.565 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-29 12:14:25.565 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-29 12:14:25.565 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingModule
2024-03-29 12:14:25.565 +08:00 [INF]               - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-29 12:14:25.565 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-29 12:14:25.565 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-29 12:14:25.565 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.Validation.AbpValidationModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-29 12:14:25.565 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-29 12:14:25.565 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-29 12:14:25.565 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-29 12:14:25.565 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-29 12:14:25.565 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-29 12:14:25.565 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-29 12:14:25.565 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-29 12:14:25.565 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-29 12:14:25.565 +08:00 [INF]   - Acme.BookStore.Application.YiAbpApplicationModule
2024-03-29 12:14:25.565 +08:00 [INF]     - Acme.BookStore.Application.Contracts.YiAbpApplicationContractsModule
2024-03-29 12:14:25.565 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-29 12:14:25.565 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-29 12:14:25.565 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-29 12:14:25.565 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-29 12:14:25.565 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-29 12:14:25.565 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-29 12:14:25.565 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-29 12:14:25.565 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-29 12:14:25.565 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-29 12:14:25.565 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-29 12:14:25.565 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-29 12:14:25.565 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-29 12:14:25.565 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-29 12:14:25.565 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-29 12:14:25.565 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-29 12:14:25.565 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-29 12:14:25.565 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-29 12:14:25.565 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-29 12:14:25.565 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-29 12:14:25.565 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-29 12:14:25.565 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-29 12:14:25.565 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-29 12:14:25.565 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-29 12:14:25.565 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-29 12:14:25.572 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-29 12:14:25.577 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-29 12:14:26.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.224 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "operationlog"(
"id" uuid NOT NULL  ,
"title" varchar(255) DEFAULT NULL  ,
"opertype" int4 NOT NULL  ,
"requestmethod" varchar(255) DEFAULT NULL  ,
"operuser" varchar(255) DEFAULT NULL  ,
"operip" varchar(255) DEFAULT NULL  ,
"operlocation" varchar(255) DEFAULT NULL  ,
"method" varchar(255) DEFAULT NULL  ,
"requestparam" varchar(255) DEFAULT NULL  ,
"requestresult" varchar(9999) DEFAULT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-03-29 12:14:26.257 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-03-29 12:14:26.257 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-03-29 12:14:26.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-03-29 12:14:26.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-03-29 12:14:26.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-03-29 12:14:26.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-03-29 12:14:26.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-03-29 12:14:26.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-03-29 12:14:26.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-03-29 12:14:26.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-29 12:14:26.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "config"(
"id" uuid NOT NULL  ,
"configname" varchar(255) NOT NULL  ,
"configkey" varchar(255) NOT NULL  ,
"configvalue" varchar(255) NOT NULL  ,
"configtype" varchar(255) DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"remark" varchar(255) DEFAULT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-03-29 12:14:26.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-03-29 12:14:26.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-03-29 12:14:26.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-03-29 12:14:26.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-03-29 12:14:26.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-03-29 12:14:26.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-03-29 12:14:26.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-29 12:14:26.322 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.326 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.326 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "dept"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean NOT NULL  ,
"deptname" varchar(255) NOT NULL  ,
"deptcode" varchar(255) NOT NULL  ,
"leader" varchar(255) DEFAULT NULL  ,
"parentid" uuid NOT NULL  ,
"remark" varchar(255) DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-03-29 12:14:26.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:14:26.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-03-29 12:14:26.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-03-29 12:14:26.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 12:14:26.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 12:14:26.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-03-29 12:14:26.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-03-29 12:14:26.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-03-29 12:14:26.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-03-29 12:14:26.333 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-03-29 12:14:26.333 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-03-29 12:14:26.333 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-03-29 12:14:26.333 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-03-29 12:14:26.333 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-29 12:14:26.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.346 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "dictionary"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean NOT NULL  ,
"remark" varchar(255) DEFAULT NULL  ,
"listclass" varchar(255) DEFAULT NULL  ,
"cssclass" varchar(255) DEFAULT NULL  ,
"dicttype" varchar(255) NOT NULL  ,
"dictlabel" varchar(255) DEFAULT NULL  ,
"dictvalue" varchar(255) NOT NULL  ,
"isdefault" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-03-29 12:14:26.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:14:26.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-03-29 12:14:26.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-03-29 12:14:26.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-03-29 12:14:26.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-03-29 12:14:26.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-03-29 12:14:26.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-03-29 12:14:26.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-03-29 12:14:26.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-03-29 12:14:26.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-03-29 12:14:26.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-29 12:14:26.362 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.369 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "dictionarytype"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean DEFAULT NULL  ,
"dictname" varchar(255) NOT NULL  ,
"dicttype" varchar(255) NOT NULL  ,
"remark" varchar(255) DEFAULT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"concurrencystamp" varchar(255) NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.375 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-03-29 12:14:26.375 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:14:26.375 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-03-29 12:14:26.375 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-03-29 12:14:26.375 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-03-29 12:14:26.375 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-03-29 12:14:26.375 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-03-29 12:14:26.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-29 12:14:26.384 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "file"(
"id" uuid NOT NULL  ,
"filesize" numeric NOT NULL  ,
"filename" varchar(255) NOT NULL  ,
"filepath" varchar(255) NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"concurrencystamp" varchar(255) NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-03-29 12:14:26.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-03-29 12:14:26.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-03-29 12:14:26.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-29 12:14:26.403 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "loginlog"(
"id" uuid NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"loginuser" varchar(255) DEFAULT NULL  ,
"loginlocation" varchar(255) DEFAULT NULL  ,
"loginip" varchar(255) DEFAULT NULL  ,
"browser" varchar(255) DEFAULT NULL  ,
"os" varchar(255) DEFAULT NULL  ,
"logmsg" varchar(255) DEFAULT NULL  ,
"creatorid" uuid DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.414 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-03-29 12:14:26.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-03-29 12:14:26.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-03-29 12:14:26.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-03-29 12:14:26.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-03-29 12:14:26.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-03-29 12:14:26.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_LoginUser ON "loginlog"("loginuser" Asc)
===============================

2024-03-29 12:14:26.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-29 12:14:26.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "menu"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean NOT NULL  ,
"menuname" varchar(255) NOT NULL  ,
"menutype" int4 NOT NULL  ,
"permissioncode" varchar(255) DEFAULT NULL  ,
"parentid" uuid NOT NULL  ,
"menuicon" varchar(255) DEFAULT NULL  ,
"router" varchar(255) DEFAULT NULL  ,
"islink" boolean NOT NULL  ,
"iscache" boolean NOT NULL  ,
"isshow" boolean NOT NULL  ,
"remark" varchar(255) DEFAULT NULL  ,
"component" varchar(255) DEFAULT NULL  ,
"query" varchar(255) DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-03-29 12:14:26.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:14:26.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-03-29 12:14:26.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-03-29 12:14:26.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 12:14:26.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 12:14:26.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-03-29 12:14:26.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-03-29 12:14:26.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-03-29 12:14:26.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-03-29 12:14:26.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-03-29 12:14:26.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-03-29 12:14:26.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-03-29 12:14:26.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-03-29 12:14:26.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-03-29 12:14:26.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-03-29 12:14:26.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-03-29 12:14:26.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-03-29 12:14:26.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-29 12:14:26.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.469 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "notice"(
"id" uuid NOT NULL  ,
"title" varchar(255) NOT NULL  ,
"type" int4 NOT NULL  ,
"content" text NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-03-29 12:14:26.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-03-29 12:14:26.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-03-29 12:14:26.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.480 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-29 12:14:26.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "post"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean NOT NULL  ,
"postcode" varchar(255) NOT NULL  ,
"postname" varchar(255) NOT NULL  ,
"remark" varchar(255) DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-03-29 12:14:26.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:14:26.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-03-29 12:14:26.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-03-29 12:14:26.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 12:14:26.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 12:14:26.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-03-29 12:14:26.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-03-29 12:14:26.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-03-29 12:14:26.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-03-29 12:14:26.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-03-29 12:14:26.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-03-29 12:14:26.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-29 12:14:26.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "roledept"(
"id" uuid NOT NULL  ,
"roleid" uuid NOT NULL  ,
"deptid" uuid NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-03-29 12:14:26.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-03-29 12:14:26.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-03-29 12:14:26.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-03-29 12:14:26.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.515 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-29 12:14:26.518 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.523 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "role"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"rolename" varchar(255) NOT NULL  ,
"rolecode" varchar(255) NOT NULL  ,
"remark" varchar(255) DEFAULT NULL  ,
"datascope" int4 NOT NULL  ,
"state" boolean NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-03-29 12:14:26.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:14:26.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-03-29 12:14:26.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-03-29 12:14:26.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 12:14:26.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 12:14:26.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-03-29 12:14:26.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-03-29 12:14:26.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-03-29 12:14:26.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-03-29 12:14:26.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-03-29 12:14:26.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-03-29 12:14:26.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-03-29 12:14:26.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-29 12:14:26.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "rolemenu"(
"id" uuid NOT NULL  ,
"roleid" uuid NOT NULL  ,
"menuid" uuid NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-03-29 12:14:26.547 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-03-29 12:14:26.547 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-29 12:14:26.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "user"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"name" varchar(255) DEFAULT NULL  ,
"age" int4 DEFAULT NULL  ,
"username" varchar(255) NOT NULL  ,
"password" varchar(255) NOT NULL  ,
"salt" varchar(255) NOT NULL  ,
"icon" varchar(255) DEFAULT NULL  ,
"nick" varchar(255) DEFAULT NULL  ,
"email" varchar(255) DEFAULT NULL  ,
"ip" varchar(255) DEFAULT NULL  ,
"address" varchar(255) DEFAULT NULL  ,
"phone" int8 DEFAULT NULL  ,
"introduction" varchar(255) DEFAULT NULL  ,
"remark" varchar(255) DEFAULT NULL  ,
"sex" int4 NOT NULL  ,
"deptid" uuid DEFAULT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"state" boolean NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-03-29 12:14:26.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-03-29 12:14:26.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-03-29 12:14:26.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-03-29 12:14:26.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-03-29 12:14:26.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-03-29 12:14:26.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-03-29 12:14:26.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-03-29 12:14:26.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-03-29 12:14:26.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-03-29 12:14:26.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-03-29 12:14:26.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-03-29 12:14:26.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-03-29 12:14:26.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-03-29 12:14:26.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-03-29 12:14:26.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-03-29 12:14:26.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-03-29 12:14:26.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-03-29 12:14:26.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-03-29 12:14:26.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 12:14:26.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 12:14:26.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-03-29 12:14:26.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-03-29 12:14:26.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-03-29 12:14:26.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.572 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_UserName ON "user"("username" Asc)
===============================

2024-03-29 12:14:26.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-29 12:14:26.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "userpost"(
"id" uuid NOT NULL  ,
"userid" uuid NOT NULL  ,
"postid" uuid NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-03-29 12:14:26.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-03-29 12:14:26.592 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-03-29 12:14:26.592 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-03-29 12:14:26.592 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-29 12:14:26.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "userrole"(
"id" uuid NOT NULL  ,
"roleid" uuid NOT NULL  ,
"userid" uuid NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-03-29 12:14:26.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-03-29 12:14:26.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-03-29 12:14:26.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-03-29 12:14:26.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-29 12:14:26.613 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.619 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "auth"(
"id" uuid NOT NULL  ,
"userid" uuid NOT NULL  ,
"openid" varchar(255) NOT NULL  ,
"name" varchar(255) NOT NULL  ,
"authtype" varchar(255) NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"concurrencystamp" varchar(255) NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-03-29 12:14:26.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-29 12:14:26.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "accesslog"(
"id" uuid NOT NULL  ,
"number" int8 NOT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"creationtime" timestamp NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-29 12:14:26.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "bbsuserextrainfo"(
"id" uuid NOT NULL  ,
"userid" uuid NOT NULL  ,
"userlimit" int4 NOT NULL  ,
"level" int4 NOT NULL  ,
"money" numeric NOT NULL  ,
"experience" int8 NOT NULL  ,
"discussnumber" int4 NOT NULL  ,
"commentnumber" int4 NOT NULL  ,
"agreenumber" int4 NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-03-29 12:14:26.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-03-29 12:14:26.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-03-29 12:14:26.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-03-29 12:14:26.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-03-29 12:14:26.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-03-29 12:14:26.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-03-29 12:14:26.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-03-29 12:14:26.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-03-29 12:14:26.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_UserId ON "bbsuserextrainfo"("userid" Asc)
===============================

2024-03-29 12:14:26.661 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-29 12:14:26.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "setting"(
"id" uuid NOT NULL  ,
"commentpage" int4 NOT NULL  ,
"discusspage" int4 NOT NULL  ,
"commentexperience" int4 NOT NULL  ,
"discussexperience" int4 NOT NULL  ,
"title" varchar(255) NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-29 12:14:26.686 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "level"(
"id" uuid NOT NULL  ,
"currentlevel" int4 NOT NULL  ,
"minexperience" numeric NOT NULL  ,
"name" varchar(255) NOT NULL  ,
"nick" varchar(255) DEFAULT NULL  ,
"logo" varchar(255) DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-03-29 12:14:26.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-03-29 12:14:26.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-03-29 12:14:26.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-03-29 12:14:26.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-03-29 12:14:26.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-03-29 12:14:26.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-29 12:14:26.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.708 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "signin"(
"id" uuid NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"continuousnumber" int4 NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-03-29 12:14:26.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-03-29 12:14:26.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-03-29 12:14:26.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_CreatorId ON "signin"("creatorid" Asc)
===============================

2024-03-29 12:14:26.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.719 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-29 12:14:26.721 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.725 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "agree"(
"id" uuid NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"discussid" uuid NOT NULL  ,
"creatorid" uuid DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-03-29 12:14:26.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-03-29 12:14:26.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_CreatorId_DiscussId ON "agree"("creatorid" Asc,"discussid" Asc)
===============================

2024-03-29 12:14:26.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-29 12:14:26.738 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.744 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "article"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"content" text NOT NULL  ,
"name" varchar(255) NOT NULL  ,
"discussid" uuid NOT NULL  ,
"parentid" uuid NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.749 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-03-29 12:14:26.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.749 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_Name ON "article"("name" Asc)
===============================

2024-03-29 12:14:26.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_ParentId ON "article"("parentid" Asc)
===============================

2024-03-29 12:14:26.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.756 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.756 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_DiscussId ON "article"("discussid" Asc)
===============================

2024-03-29 12:14:26.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-29 12:14:26.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "banner"(
"id" uuid NOT NULL  ,
"name" varchar(255) NOT NULL  ,
"logo" varchar(255) DEFAULT NULL  ,
"color" varchar(255) DEFAULT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-29 12:14:26.782 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "comment"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"content" varchar(500) NOT NULL  ,
"discussid" uuid NOT NULL  ,
"parentid" uuid NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"rootid" uuid NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-03-29 12:14:26.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-03-29 12:14:26.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-29 12:14:26.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "discuss"(
"id" uuid NOT NULL  ,
"title" varchar(255) DEFAULT NULL  ,
"types" varchar(255) DEFAULT NULL  ,
"introduction" varchar(255) DEFAULT NULL  ,
"agreenum" int4 NOT NULL  ,
"seenum" int4 NOT NULL  ,
"cover" varchar(255) DEFAULT NULL  ,
"content" text NOT NULL  ,
"color" varchar(255) DEFAULT NULL  ,
"isdeleted" boolean NOT NULL  ,
"istop" boolean NOT NULL  ,
"ordernum" int4 NOT NULL  ,
"permissiontype" int4 NOT NULL  ,
"plateid" uuid NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"permissionuserids" json DEFAULT NULL  ,
"isdisablecreatecomment" boolean NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.814 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-03-29 12:14:26.814 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-03-29 12:14:26.814 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-03-29 12:14:26.814 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_Title ON "discuss"("title" Asc)
===============================

2024-03-29 12:14:26.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_PlateId ON "discuss"("plateid" Asc)
===============================

2024-03-29 12:14:26.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 12:14:26.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_CreationTime ON "discuss"("creationtime" Desc)
===============================

2024-03-29 12:14:26.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-29 12:14:26.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "discussmytype"(
"id" uuid NOT NULL  ,
"discussid" uuid NOT NULL  ,
"mytypeid" uuid NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-29 12:14:26.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "discusstop"(
"id" uuid NOT NULL  ,
"ordernum" int4 NOT NULL  ,
"discussid" uuid NOT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-03-29 12:14:26.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-29 12:14:26.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "mytype"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"name" varchar(255) NOT NULL  ,
"color" varchar(255) DEFAULT NULL  ,
"backgroundcolor" varchar(255) DEFAULT NULL  ,
"userid" uuid NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-29 12:14:26.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.884 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "plate"(
"id" uuid NOT NULL  ,
"code" varchar(255) NOT NULL  ,
"name" varchar(255) NOT NULL  ,
"logo" varchar(255) DEFAULT NULL  ,
"introduction" varchar(255) DEFAULT NULL  ,
"isdeleted" boolean NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"isdisablecreatediscuss" boolean NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-03-29 12:14:26.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-29 12:14:26.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "bankcard"(
"id" uuid NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"lastdeposittime" timestamp DEFAULT NULL  ,
"lastdrawtime" timestamp DEFAULT NULL  ,
"userid" uuid NOT NULL  ,
"storagemoney" numeric NOT NULL  ,
"maxstoragemoney" numeric NOT NULL  ,
"fulltermtime" timestamp DEFAULT NULL  ,
"bankcardstate" int4 NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-03-29 12:14:26.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-03-29 12:14:26.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-03-29 12:14:26.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-03-29 12:14:26.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-03-29 12:14:26.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-03-29 12:14:26.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-03-29 12:14:26.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-03-29 12:14:26.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.913 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-29 12:14:26.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.919 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "interestrecords"(
"id" uuid NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"comparisonvalue" numeric NOT NULL  ,
"value" numeric NOT NULL  ,
"isfluctuate" boolean NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-03-29 12:14:26.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-03-29 12:14:26.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-03-29 12:14:26.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-03-29 12:14:26.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.931 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.931 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-29 12:14:26.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 12:14:26.939 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "book"(
"id" uuid NOT NULL  ,
"name" varchar(255) NOT NULL  ,
"type" int4 NOT NULL  ,
"publishdate" timestamp NOT NULL  ,
"price" float4 NOT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"concurrencystamp" varchar(255) NOT NULL   , Primary key("id"))
===============================

2024-03-29 12:14:26.944 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('book') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('book')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 12:14:26.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:26.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Book')
===============================

2024-03-29 12:14:26.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 12:14:27.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.047 +08:00 [DBG] =========Yi-SQL耗时8.9133毫秒=====
2024-03-29 12:14:27.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "dept"  ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark") VALUES 
 (  'e6ebca6a-f4a4-c5f6-2912-3a119a9760f2' , 'False' , '2024-03-29T12:14:27.0589945+08:00' , NULL , NULL , NULL , '100' , 'True' , '橙子科技' , 'Yi' , '橙子' , '00000000-0000-0000-0000-000000000000' , '如名所指' ),
 (  '92ddd400-2bd6-a928-ac61-3a119a9760f3' , 'False' , '2024-03-29T12:14:27.0594720+08:00' , NULL , NULL , NULL , '100' , 'True' , '深圳总公司' , '' , NULL , 'e6ebca6a-f4a4-c5f6-2912-3a119a9760f2' , NULL ),
 (  '8ca24824-ac24-e8dd-9d21-3a119a9760f3' , 'False' , '2024-03-29T12:14:27.0594930+08:00' , NULL , NULL , NULL , '100' , 'True' , '江西总公司' , '' , NULL , 'e6ebca6a-f4a4-c5f6-2912-3a119a9760f2' , NULL ),
 (  '310e3b0b-b741-5786-ffcc-3a119a9760f3' , 'False' , '2024-03-29T12:14:27.0594936+08:00' , NULL , NULL , NULL , '100' , 'True' , '研发部门' , '' , NULL , '92ddd400-2bd6-a928-ac61-3a119a9760f3' , NULL ),
 (  'e0c47979-f00d-26c7-101f-3a119a9760f3' , 'False' , '2024-03-29T12:14:27.0594940+08:00' , NULL , NULL , NULL , '100' , 'True' , '市场部门' , '' , NULL , '92ddd400-2bd6-a928-ac61-3a119a9760f3' , NULL ),
 (  'a5100d19-9ace-6dbb-a926-3a119a9760f3' , 'False' , '2024-03-29T12:14:27.0594947+08:00' , NULL , NULL , NULL , '100' , 'True' , '测试部门' , '' , NULL , '92ddd400-2bd6-a928-ac61-3a119a9760f3' , NULL ),
 (  '0259b42a-8817-9c60-1b65-3a119a9760f3' , 'False' , '2024-03-29T12:14:27.0594951+08:00' , NULL , NULL , NULL , '100' , 'True' , '财务部门' , '' , NULL , '92ddd400-2bd6-a928-ac61-3a119a9760f3' , NULL ),
 (  '3f9ef02a-0f12-4ca5-0e4e-3a119a9760f3' , 'False' , '2024-03-29T12:14:27.0594954+08:00' , NULL , NULL , NULL , '100' , 'True' , '运维部门' , '' , NULL , '92ddd400-2bd6-a928-ac61-3a119a9760f3' , NULL ),
 (  '38c6f3af-e240-a9bc-70bb-3a119a9760f3' , 'False' , '2024-03-29T12:14:27.0594958+08:00' , NULL , NULL , NULL , '100' , 'True' , '市场部门' , '' , NULL , '8ca24824-ac24-e8dd-9d21-3a119a9760f3' , NULL ),
 (  '25e0225d-3c6e-1ca6-74f9-3a119a9760f3' , 'False' , '2024-03-29T12:14:27.0594963+08:00' , NULL , NULL , NULL , '100' , 'True' , '财务部门' , '' , NULL , '8ca24824-ac24-e8dd-9d21-3a119a9760f3' , NULL )
;

===============================

2024-03-29 12:14:27.086 +08:00 [DBG] =========Yi-SQL耗时3.3334毫秒=====
2024-03-29 12:14:27.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.090 +08:00 [DBG] =========Yi-SQL耗时1.0619毫秒=====
2024-03-29 12:14:27.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "dictionary"  ("id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime") VALUES 
 (  '64ae3107-a5ca-e86a-c7d7-3a119a976115' , 'False' , '100' , 'True' , '性别男' , NULL , NULL , 'sys_user_sex' , '男' , '0' , 'False' , '2024-03-29T12:14:27.0935829+08:00' , NULL , NULL , NULL ),
 (  '2d4897b0-1479-7981-f538-3a119a976116' , 'False' , '99' , 'True' , '性别女' , NULL , NULL , 'sys_user_sex' , '女' , '1' , 'False' , '2024-03-29T12:14:27.0947190+08:00' , NULL , NULL , NULL ),
 (  '632e519d-349c-2894-400c-3a119a976116' , 'False' , '98' , 'True' , '性别未知' , NULL , NULL , 'sys_user_sex' , '未知' , '2' , 'False' , '2024-03-29T12:14:27.0949420+08:00' , NULL , NULL , NULL ),
 (  'f4cba9d0-b072-4d63-c5b0-3a119a976117' , 'False' , '100' , 'True' , '显示菜单' , NULL , NULL , 'sys_show_hide' , '显示' , 'true' , 'False' , '2024-03-29T12:14:27.0950104+08:00' , NULL , NULL , NULL ),
 (  '5efe34a7-e10b-0851-da46-3a119a976117' , 'False' , '99' , 'True' , '隐藏菜单' , NULL , NULL , 'sys_show_hide' , '隐藏' , 'false' , 'False' , '2024-03-29T12:14:27.0950245+08:00' , NULL , NULL , NULL ),
 (  '535449d2-a85a-0248-467e-3a119a976117' , 'False' , '100' , 'True' , '正常状态' , NULL , NULL , 'sys_normal_disable' , '正常' , 'true' , 'False' , '2024-03-29T12:14:27.0950416+08:00' , NULL , NULL , NULL ),
 (  'aac9579c-decc-6935-1046-3a119a976117' , 'False' , '99' , 'True' , '停用状态' , 'danger' , NULL , 'sys_normal_disable' , '停用' , 'false' , 'False' , '2024-03-29T12:14:27.0950592+08:00' , NULL , NULL , NULL ),
 (  '691a5695-4882-f120-fb40-3a119a976117' , 'False' , '100' , 'True' , '正常状态' , NULL , NULL , 'sys_job_status' , '正常' , '0' , 'False' , '2024-03-29T12:14:27.0950730+08:00' , NULL , NULL , NULL ),
 (  '89f2cc85-c71b-5aad-5c05-3a119a976117' , 'False' , '99' , 'True' , '停用状态' , 'danger' , NULL , 'sys_job_status' , '暂停' , '1' , 'False' , '2024-03-29T12:14:27.0950955+08:00' , NULL , NULL , NULL ),
 (  '31e750e0-c04a-408f-64e1-3a119a976117' , 'False' , '100' , 'True' , '默认分组' , NULL , NULL , 'sys_job_group' , '默认' , 'DEFAULT' , 'False' , '2024-03-29T12:14:27.0951139+08:00' , NULL , NULL , NULL ),
 (  '63c5557c-110d-61bc-0906-3a119a976117' , 'False' , '99' , 'True' , '系统分组' , NULL , NULL , 'sys_job_group' , '系统' , 'SYSTEM' , 'False' , '2024-03-29T12:14:27.0951298+08:00' , NULL , NULL , NULL ),
 (  'a2b3616f-714e-ba75-7d43-3a119a976117' , 'False' , '100' , 'True' , '系统默认是' , NULL , NULL , 'sys_yes_no' , '是' , 'Y' , 'False' , '2024-03-29T12:14:27.0951445+08:00' , NULL , NULL , NULL ),
 (  '8b3d8246-5a0d-036e-451f-3a119a976117' , 'False' , '99' , 'True' , '系统默认否' , 'danger' , NULL , 'sys_yes_no' , '否' , 'N' , 'False' , '2024-03-29T12:14:27.0951597+08:00' , NULL , NULL , NULL ),
 (  '9872efe8-4611-1f70-6e4f-3a119a976117' , 'False' , '100' , 'True' , '通知' , NULL , NULL , 'sys_notice_type' , '通知' , '1' , 'False' , '2024-03-29T12:14:27.0951783+08:00' , NULL , NULL , NULL ),
 (  'd667e3c0-6ea0-34d6-b016-3a119a976117' , 'False' , '99' , 'True' , '公告' , NULL , NULL , 'sys_notice_type' , '公告' , '2' , 'False' , '2024-03-29T12:14:27.0951944+08:00' , NULL , NULL , NULL ),
 (  'aed7edad-09e7-b23e-13d5-3a119a976117' , 'False' , '100' , 'True' , '正常状态' , NULL , NULL , 'sys_notice_status' , '正常' , '0' , 'False' , '2024-03-29T12:14:27.0952103+08:00' , NULL , NULL , NULL ),
 (  '35443e12-a721-0359-a7b1-3a119a976117' , 'False' , '99' , 'True' , '关闭状态' , 'danger' , NULL , 'sys_notice_status' , '关闭' , '1' , 'False' , '2024-03-29T12:14:27.0952263+08:00' , NULL , NULL , NULL ),
 (  'f06c5884-461b-1325-2114-3a119a976117' , 'False' , '100' , 'True' , '新增操作' , NULL , NULL , 'sys_oper_type' , '新增' , 'Insert' , 'False' , '2024-03-29T12:14:27.0952481+08:00' , NULL , NULL , NULL ),
 (  'c0b8b80c-ea88-31ed-e0c3-3a119a976117' , 'False' , '99' , 'True' , '修改操作' , NULL , NULL , 'sys_oper_type' , '修改' , 'Update' , 'False' , '2024-03-29T12:14:27.0952663+08:00' , NULL , NULL , NULL ),
 (  'c85b2842-436b-17a4-24c8-3a119a976117' , 'False' , '98' , 'True' , '删除操作' , 'danger' , NULL , 'sys_oper_type' , '删除' , 'Delete' , 'False' , '2024-03-29T12:14:27.0952929+08:00' , NULL , NULL , NULL ),
 (  'd5813896-7db0-144d-77ab-3a119a976117' , 'False' , '97' , 'True' , '授权操作' , NULL , NULL , 'sys_oper_type' , '授权' , 'Auth' , 'False' , '2024-03-29T12:14:27.0953110+08:00' , NULL , NULL , NULL ),
 (  '737696ba-d281-6569-db0e-3a119a976117' , 'False' , '96' , 'True' , '导出操作' , NULL , NULL , 'sys_oper_type' , '导出' , 'Export' , 'False' , '2024-03-29T12:14:27.0953317+08:00' , NULL , NULL , NULL ),
 (  '4e462d98-5d9a-22d9-5a82-3a119a976117' , 'False' , '95' , 'True' , '导入操作' , NULL , NULL , 'sys_oper_type' , '导入' , 'Import' , 'False' , '2024-03-29T12:14:27.0953498+08:00' , NULL , NULL , NULL ),
 (  'd9bb2414-75ef-7291-4110-3a119a976117' , 'False' , '94' , 'True' , '强退操作' , NULL , NULL , 'sys_oper_type' , '强退' , 'ForcedOut' , 'False' , '2024-03-29T12:14:27.0953719+08:00' , NULL , NULL , NULL ),
 (  '1d2a641f-a1c6-2ef5-98c2-3a119a976117' , 'False' , '93' , 'True' , '生成代码操作' , NULL , NULL , 'sys_oper_type' , '生成代码' , 'GenerateCode' , 'False' , '2024-03-29T12:14:27.0953965+08:00' , NULL , NULL , NULL ),
 (  'c3c859ab-bb63-a085-aa8d-3a119a976117' , 'False' , '92' , 'True' , '清空数据操作' , 'danger' , NULL , 'sys_oper_type' , '清空数据' , 'ClearData' , 'False' , '2024-03-29T12:14:27.0954168+08:00' , NULL , NULL , NULL ),
 (  'b812a4f4-5643-b729-c842-3a119a976117' , 'False' , '100' , 'True' , '正常状态' , NULL , NULL , 'sys_common_status' , '成功' , 'false' , 'False' , '2024-03-29T12:14:27.0954396+08:00' , NULL , NULL , NULL ),
 (  '373c1790-5fd1-afb2-e988-3a119a976117' , 'False' , '99' , 'True' , '失败状态' , 'danger' , NULL , 'sys_common_status' , '失败' , 'true' , 'False' , '2024-03-29T12:14:27.0954599+08:00' , NULL , NULL , NULL )
;

===============================

2024-03-29 12:14:27.098 +08:00 [DBG] =========Yi-SQL耗时2.0964毫秒=====
2024-03-29 12:14:27.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.102 +08:00 [DBG] =========Yi-SQL耗时0.8508毫秒=====
2024-03-29 12:14:27.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "dictionarytype"  ("id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp") VALUES 
 (  '01f02fdf-37f3-128a-97c9-3a119a976121' , 'False' , '100' , 'True' , '用户性别' , 'sys_user_sex' , '用户性别列表' , '2024-03-29T12:14:27.1052122+08:00' , NULL , NULL , NULL , '7dc3e00bb3bd4149b3eca839cd51759b' ),
 (  'cddc7310-1736-e93f-ed43-3a119a976121' , 'False' , '100' , 'True' , '菜单状态' , 'sys_show_hide' , '菜单状态列表' , '2024-03-29T12:14:27.1062150+08:00' , NULL , NULL , NULL , 'dcaba830f0d34e46b69269683e4f6388' ),
 (  '81e1d450-d124-3a4f-d19d-3a119a976122' , 'False' , '100' , 'True' , '系统开关' , 'sys_normal_disable' , '系统开关列表' , '2024-03-29T12:14:27.1065075+08:00' , NULL , NULL , NULL , '1b000c001b314a3e87205eb01128786e' ),
 (  '5afc7291-7fa4-d81e-a0cc-3a119a976122' , 'False' , '100' , 'True' , '任务状态' , 'sys_job_status' , '任务状态列表' , '2024-03-29T12:14:27.1065890+08:00' , NULL , NULL , NULL , 'a96c0c6bc05a4f01923f18220f0497bf' ),
 (  '1db1738b-4e19-92a3-83e7-3a119a976122' , 'False' , '100' , 'True' , '任务分组' , 'sys_job_group' , '任务分组列表' , '2024-03-29T12:14:27.1066058+08:00' , NULL , NULL , NULL , '9044f85498e143a392ddb9efad0496e5' ),
 (  '773f803e-4058-61d3-f7cf-3a119a976122' , 'False' , '100' , 'True' , '系统是否' , 'sys_yes_no' , '系统是否列表' , '2024-03-29T12:14:27.1066203+08:00' , NULL , NULL , NULL , 'd59e814a62f74192b55faaced79e291d' ),
 (  'f654021f-442f-06b0-9931-3a119a976122' , 'False' , '100' , 'True' , '通知类型' , 'sys_notice_type' , '通知类型列表' , '2024-03-29T12:14:27.1066315+08:00' , NULL , NULL , NULL , 'a4d445280ff04192ba7e018281ed6e69' ),
 (  '3466d26c-525a-d4bf-d7bd-3a119a976122' , 'False' , '100' , 'True' , '通知状态' , 'sys_notice_status' , '通知状态列表' , '2024-03-29T12:14:27.1066454+08:00' , NULL , NULL , NULL , '3f11e25b9b694a69ad0918985f84a60e' ),
 (  '8a6b5ab4-fcf9-b0de-de15-3a119a976122' , 'False' , '100' , 'True' , '操作类型' , 'sys_oper_type' , '操作类型列表' , '2024-03-29T12:14:27.1066602+08:00' , NULL , NULL , NULL , '92a47238b8664dc48a6bdc299529fffb' ),
 (  '3b618072-a36a-dcc8-c0f3-3a119a976122' , 'False' , '100' , 'True' , '系统状态' , 'sys_common_status' , '登录状态列表' , '2024-03-29T12:14:27.1066752+08:00' , NULL , NULL , NULL , '31e24fc2ddda42c186fa14f423b0eac9' )
;

===============================

2024-03-29 12:14:27.108 +08:00 [DBG] =========Yi-SQL耗时0.8723毫秒=====
2024-03-29 12:14:27.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.112 +08:00 [DBG] =========Yi-SQL耗时1.788毫秒=====
2024-03-29 12:14:27.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "menu"  ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query") VALUES 
 (  'e6bf52fd-b827-33d0-b83c-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1186032+08:00' , NULL , NULL , NULL , '100' , 'True' , '系统管理' , '0' , NULL , '00000000-0000-0000-0000-000000000000' , 'system' , '/system' , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '33197b18-4bca-93d8-d456-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1188272+08:00' , NULL , NULL , NULL , '91' , 'True' , '代码生成' , '0' , NULL , '00000000-0000-0000-0000-000000000000' , 'build' , '/code' , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '6da68721-b0b7-318b-3140-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1188533+08:00' , NULL , NULL , NULL , '100' , 'True' , '数据表管理' , '1' , 'code:table:list' , '33197b18-4bca-93d8-d456-3a119a97612e' , 'online' , 'table' , 'False' , 'True' , 'True' , NULL , 'code/table/index' , NULL ),
 (  '7fd9da0f-5c5a-0d4e-07e2-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189009+08:00' , NULL , NULL , NULL , '99' , 'True' , '字段管理' , '1' , 'code:field:list' , '33197b18-4bca-93d8-d456-3a119a97612e' , 'number' , 'field' , 'False' , 'True' , 'True' , NULL , 'code/field/index' , NULL ),
 (  'f21f502a-161d-adc0-6510-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189051+08:00' , NULL , NULL , NULL , '98' , 'True' , '模板管理' , '1' , 'code:template:list' , '33197b18-4bca-93d8-d456-3a119a97612e' , 'documentation' , 'template' , 'False' , 'True' , 'True' , NULL , 'code/template/index' , NULL ),
 (  'ceecb9ff-5230-f3e0-79fe-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189545+08:00' , NULL , NULL , NULL , '99' , 'True' , '系统监控' , '0' , NULL , '00000000-0000-0000-0000-000000000000' , 'monitor' , '/monitor' , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '7f352554-3e88-414b-5c6b-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189554+08:00' , NULL , NULL , NULL , '100' , 'True' , '在线用户' , '1' , 'monitor:online:list' , 'ceecb9ff-5230-f3e0-79fe-3a119a97612e' , 'online' , 'online' , 'False' , 'True' , 'True' , NULL , 'monitor/online/index' , NULL ),
 (  'b909e788-7f58-c130-ffa2-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189560+08:00' , NULL , NULL , NULL , '99' , 'True' , '缓存列表' , '1' , 'monitor:cache:list' , 'ceecb9ff-5230-f3e0-79fe-3a119a97612e' , 'redis-list' , 'cacheList' , 'False' , 'True' , 'True' , NULL , 'monitor/cache/list' , NULL ),
 (  'b7834f3c-9b95-32c8-262c-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189575+08:00' , NULL , NULL , NULL , '98' , 'True' , '服务监控' , '1' , 'monitor:server:list' , 'ceecb9ff-5230-f3e0-79fe-3a119a97612e' , 'server' , 'server' , 'False' , 'True' , 'True' , NULL , 'monitor/server/index' , NULL ),
 (  '6de9c87c-994b-53d0-d72a-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189582+08:00' , NULL , NULL , NULL , '97' , 'True' , '定时任务' , '1' , 'monitor:job:list' , 'ceecb9ff-5230-f3e0-79fe-3a119a97612e' , 'job' , 'job' , 'False' , 'True' , 'True' , NULL , 'monitor/job/index' , NULL ),
 (  '0965b770-1de8-1c24-7e9f-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189586+08:00' , NULL , NULL , NULL , '98' , 'True' , '系统工具' , '0' , NULL , '00000000-0000-0000-0000-000000000000' , 'tool' , '/tool' , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '122728fa-d045-5233-8390-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189590+08:00' , NULL , NULL , NULL , '100' , 'True' , '接口文档' , '1' , NULL , '0965b770-1de8-1c24-7e9f-3a119a97612e' , 'list' , 'http://localhost:19001/swagger' , 'True' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '49d3225a-5f55-53fe-01fd-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189603+08:00' , NULL , NULL , NULL , '96' , 'True' , 'ERP(待更新)' , '0' , NULL , '00000000-0000-0000-0000-000000000000' , 'international' , '/erp' , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '1f6dc7ab-1ed7-a83f-2cb0-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189608+08:00' , NULL , NULL , NULL , '100' , 'True' , '供应商定义' , '1' , 'erp:supplier:list' , '49d3225a-5f55-53fe-01fd-3a119a97612e' , 'education' , 'supplier' , 'False' , 'True' , 'True' , NULL , 'erp/supplier/index' , NULL ),
 (  '04730933-af99-2bd8-6d91-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189613+08:00' , NULL , NULL , NULL , '100' , 'True' , '供应商查询' , '2' , 'erp:supplier:query' , '1f6dc7ab-1ed7-a83f-2cb0-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '09e87a43-4bbe-3835-b87f-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189617+08:00' , NULL , NULL , NULL , '100' , 'True' , '供应商新增' , '2' , 'erp:supplier:add' , '1f6dc7ab-1ed7-a83f-2cb0-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '1938aea2-913b-adee-f3b7-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189621+08:00' , NULL , NULL , NULL , '100' , 'True' , '供应商修改' , '2' , 'erp:supplier:edit' , '1f6dc7ab-1ed7-a83f-2cb0-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '9ccd31fa-debd-c353-f628-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189626+08:00' , NULL , NULL , NULL , '100' , 'True' , '供应商删除' , '2' , 'erp:supplier:remove' , '1f6dc7ab-1ed7-a83f-2cb0-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '032677f3-506e-62e8-4054-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189630+08:00' , NULL , NULL , NULL , '100' , 'True' , '仓库定义' , '1' , 'erp:warehouse:list' , '49d3225a-5f55-53fe-01fd-3a119a97612e' , 'education' , 'warehouse' , 'False' , 'True' , 'True' , NULL , 'erp/warehouse/index' , NULL ),
 (  '46a8c5db-5dda-6a9c-6ea2-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189635+08:00' , NULL , NULL , NULL , '100' , 'True' , '仓库查询' , '2' , 'erp:warehouse:query' , '032677f3-506e-62e8-4054-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'f6cdecaf-f3ba-b660-3afd-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189642+08:00' , NULL , NULL , NULL , '100' , 'True' , '仓库新增' , '2' , 'erp:warehouse:add' , '032677f3-506e-62e8-4054-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'd9a2b2df-4717-135c-6c5a-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189646+08:00' , NULL , NULL , NULL , '100' , 'True' , '仓库修改' , '2' , 'erp:warehouse:edit' , '032677f3-506e-62e8-4054-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'a5fed026-db70-8ad7-62da-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189650+08:00' , NULL , NULL , NULL , '100' , 'True' , '仓库删除' , '2' , 'erp:warehouse:remove' , '032677f3-506e-62e8-4054-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'b9a4c5c6-f824-1d12-0779-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189655+08:00' , NULL , NULL , NULL , '100' , 'True' , '单位定义' , '1' , 'erp:unit:list' , '49d3225a-5f55-53fe-01fd-3a119a97612e' , 'education' , 'unit' , 'False' , 'True' , 'True' , NULL , 'erp/unit/index' , NULL ),
 (  '224eea26-eab0-6d91-c760-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189722+08:00' , NULL , NULL , NULL , '100' , 'True' , '单位查询' , '2' , 'erp:unit:query' , 'b9a4c5c6-f824-1d12-0779-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '7d0af9f1-b912-67ce-699f-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189727+08:00' , NULL , NULL , NULL , '100' , 'True' , '单位新增' , '2' , 'erp:unit:add' , 'b9a4c5c6-f824-1d12-0779-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '49b1bfbf-31ca-b8ea-eba6-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189731+08:00' , NULL , NULL , NULL , '100' , 'True' , '单位修改' , '2' , 'erp:unit:edit' , 'b9a4c5c6-f824-1d12-0779-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '2169067a-5d67-b9a2-ff1b-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189735+08:00' , NULL , NULL , NULL , '100' , 'True' , '单位删除' , '2' , 'erp:unit:remove' , 'b9a4c5c6-f824-1d12-0779-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '79fdc93a-8421-3cf0-24da-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189739+08:00' , NULL , NULL , NULL , '100' , 'True' , '物料定义' , '1' , 'erp:material:list' , '49d3225a-5f55-53fe-01fd-3a119a97612e' , 'education' , 'material' , 'False' , 'True' , 'True' , NULL , 'erp/material/index' , NULL ),
 (  '29a1c43f-f156-a0b1-13e4-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189743+08:00' , NULL , NULL , NULL , '100' , 'True' , '物料查询' , '2' , 'erp:material:query' , '79fdc93a-8421-3cf0-24da-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '25cd86de-b9b6-cc1e-94f1-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189747+08:00' , NULL , NULL , NULL , '100' , 'True' , '物料新增' , '2' , 'erp:material:add' , '79fdc93a-8421-3cf0-24da-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'f67f6fcf-71d5-3608-ceec-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189751+08:00' , NULL , NULL , NULL , '100' , 'True' , '物料修改' , '2' , 'erp:material:edit' , '79fdc93a-8421-3cf0-24da-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '85b72a18-c0ce-8439-f778-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189755+08:00' , NULL , NULL , NULL , '100' , 'True' , '物料删除' , '2' , 'erp:material:remove' , '79fdc93a-8421-3cf0-24da-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '20b9ff9f-b444-99cf-b9d0-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189763+08:00' , NULL , NULL , NULL , '100' , 'True' , '采购订单' , '1' , 'erp:purchase:list' , '49d3225a-5f55-53fe-01fd-3a119a97612e' , 'education' , 'purchase' , 'False' , 'True' , 'True' , NULL , 'erp/purchase/index' , NULL ),
 (  'b2aa28aa-59cd-c7bf-7929-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189768+08:00' , NULL , NULL , NULL , '100' , 'True' , '采购订单查询' , '2' , 'erp:purchase:query' , '20b9ff9f-b444-99cf-b9d0-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '812ba8a3-fc6f-5975-8d30-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189771+08:00' , NULL , NULL , NULL , '100' , 'True' , '采购订单新增' , '2' , 'erp:purchase:add' , '20b9ff9f-b444-99cf-b9d0-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '4a7d7da7-8281-b759-e628-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189783+08:00' , NULL , NULL , NULL , '100' , 'True' , '采购订单修改' , '2' , 'erp:purchase:edit' , '20b9ff9f-b444-99cf-b9d0-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '1978bd5e-9b91-321e-2e3a-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189788+08:00' , NULL , NULL , NULL , '100' , 'True' , '采购订单删除' , '2' , 'erp:purchase:remove' , '20b9ff9f-b444-99cf-b9d0-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '46c0eabd-f0f6-163e-9c8d-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189792+08:00' , NULL , NULL , NULL , '90' , 'True' , 'Yi框架' , '0' , NULL , '00000000-0000-0000-0000-000000000000' , 'guide' , 'https://gitee.com/ccnetcore/yi' , 'True' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'c42e8baf-a6e9-6825-aab6-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189796+08:00' , NULL , NULL , NULL , '101' , 'True' , '租户管理' , '1' , 'system:tenant:list' , 'e6bf52fd-b827-33d0-b83c-3a119a97612e' , 'list' , 'tenant' , 'False' , 'True' , 'True' , NULL , 'system/tenant/index' , NULL ),
 (  '02fe9835-2400-fed3-81aa-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189801+08:00' , NULL , NULL , NULL , '100' , 'True' , '租户查询' , '2' , 'system:tenant:query' , 'c42e8baf-a6e9-6825-aab6-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '031a85e2-f84c-0687-352a-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189805+08:00' , NULL , NULL , NULL , '100' , 'True' , '租户新增' , '2' , 'system:tenant:add' , 'c42e8baf-a6e9-6825-aab6-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'e8c79327-e4f0-5d44-5dba-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189809+08:00' , NULL , NULL , NULL , '100' , 'True' , '租户修改' , '2' , 'system:tenant:edit' , 'c42e8baf-a6e9-6825-aab6-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'e6d8e71e-6563-065f-f7c2-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189813+08:00' , NULL , NULL , NULL , '100' , 'True' , '租户删除' , '2' , 'system:tenant:remove' , 'c42e8baf-a6e9-6825-aab6-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '60604454-c644-fd31-e57c-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189817+08:00' , NULL , NULL , NULL , '100' , 'True' , '用户管理' , '1' , 'system:user:list' , 'e6bf52fd-b827-33d0-b83c-3a119a97612e' , 'user' , 'user' , 'False' , 'True' , 'True' , NULL , 'system/user/index' , NULL ),
 (  'f198ce3e-196c-39bf-1fb3-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189821+08:00' , NULL , NULL , NULL , '100' , 'True' , '用户查询' , '2' , 'system:user:query' , '60604454-c644-fd31-e57c-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '2a588894-ea60-51fc-f40c-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189863+08:00' , NULL , NULL , NULL , '100' , 'True' , '用户新增' , '2' , 'system:user:add' , '60604454-c644-fd31-e57c-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'd4c7f0c7-fd94-f33a-9697-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189868+08:00' , NULL , NULL , NULL , '100' , 'True' , '用户修改' , '2' , 'system:user:edit' , '60604454-c644-fd31-e57c-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '552344a6-57cb-14ca-7d6a-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189879+08:00' , NULL , NULL , NULL , '100' , 'True' , '用户删除' , '2' , 'system:user:remove' , '60604454-c644-fd31-e57c-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'e893eea8-99b8-2d23-4c3f-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189883+08:00' , NULL , NULL , NULL , '99' , 'True' , '角色管理' , '1' , 'system:role:list' , 'e6bf52fd-b827-33d0-b83c-3a119a97612e' , 'peoples' , 'role' , 'False' , 'True' , 'True' , NULL , 'system/role/index' , NULL ),
 (  '23727978-8bad-bd4d-2eb7-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189888+08:00' , NULL , NULL , NULL , '100' , 'True' , '角色查询' , '2' , 'system:role:query' , 'e893eea8-99b8-2d23-4c3f-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'b8b42710-58e5-fcee-be58-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189892+08:00' , NULL , NULL , NULL , '100' , 'True' , '角色新增' , '2' , 'system:role:add' , 'e893eea8-99b8-2d23-4c3f-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '25f689bd-33d2-ee71-65e6-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189896+08:00' , NULL , NULL , NULL , '100' , 'True' , '角色修改' , '2' , 'system:role:edit' , 'e893eea8-99b8-2d23-4c3f-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'd4669730-cad3-a99e-27e8-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189901+08:00' , NULL , NULL , NULL , '100' , 'True' , '角色删除' , '2' , 'system:role:remove' , 'e893eea8-99b8-2d23-4c3f-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'fe25c2d8-da9f-a895-f913-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189904+08:00' , NULL , NULL , NULL , '98' , 'True' , '菜单管理' , '1' , 'system:menu:list' , 'e6bf52fd-b827-33d0-b83c-3a119a97612e' , 'tree-table' , 'menu' , 'False' , 'True' , 'True' , NULL , 'system/menu/index' , NULL ),
 (  'ab3db228-bbe8-dfeb-1ec7-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189909+08:00' , NULL , NULL , NULL , '100' , 'True' , '菜单查询' , '2' , 'system:menu:query' , 'fe25c2d8-da9f-a895-f913-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '6a747ff8-d4f9-cde6-e864-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189913+08:00' , NULL , NULL , NULL , '100' , 'True' , '菜单新增' , '2' , 'system:menu:add' , 'fe25c2d8-da9f-a895-f913-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '1c8c34ce-5695-f50d-9050-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189917+08:00' , NULL , NULL , NULL , '100' , 'True' , '菜单修改' , '2' , 'system:menu:edit' , 'fe25c2d8-da9f-a895-f913-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '02131e61-9a26-85a0-64b2-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189921+08:00' , NULL , NULL , NULL , '100' , 'True' , '菜单删除' , '2' , 'system:menu:remove' , 'fe25c2d8-da9f-a895-f913-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '8840ecb2-017b-14fa-2447-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189926+08:00' , NULL , NULL , NULL , '97' , 'True' , '部门管理' , '1' , 'system:dept:list' , 'e6bf52fd-b827-33d0-b83c-3a119a97612e' , 'tree' , 'dept' , 'False' , 'True' , 'True' , NULL , 'system/dept/index' , NULL ),
 (  '19effa61-cea9-f204-b238-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189938+08:00' , NULL , NULL , NULL , '100' , 'True' , '部门查询' , '2' , 'system:dept:query' , '8840ecb2-017b-14fa-2447-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '31e5afa3-048f-54f9-7fe8-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189942+08:00' , NULL , NULL , NULL , '100' , 'True' , '部门新增' , '2' , 'system:dept:add' , '8840ecb2-017b-14fa-2447-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '06d7f100-9988-4f94-7543-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189946+08:00' , NULL , NULL , NULL , '100' , 'True' , '部门修改' , '2' , 'system:dept:edit' , '8840ecb2-017b-14fa-2447-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'c5d200d7-932c-e368-231b-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189951+08:00' , NULL , NULL , NULL , '100' , 'True' , '部门删除' , '2' , 'system:dept:remove' , '8840ecb2-017b-14fa-2447-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '15d04061-1d93-2cac-541f-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189955+08:00' , NULL , NULL , NULL , '96' , 'True' , '岗位管理' , '1' , 'system:post:list' , 'e6bf52fd-b827-33d0-b83c-3a119a97612e' , 'post' , 'post' , 'False' , 'True' , 'True' , NULL , 'system/post/index' , NULL ),
 (  '1644acb2-a929-43ff-5b8c-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189960+08:00' , NULL , NULL , NULL , '100' , 'True' , '岗位查询' , '2' , 'system:post:query' , '15d04061-1d93-2cac-541f-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'bad5e60c-3ad7-a5f0-bb5b-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189993+08:00' , NULL , NULL , NULL , '100' , 'True' , '岗位新增' , '2' , 'system:post:add' , '15d04061-1d93-2cac-541f-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '11d6e34d-8037-f6de-885c-3a119a97612e' , 'False' , '2024-03-29T12:14:27.1189997+08:00' , NULL , NULL , NULL , '100' , 'True' , '岗位修改' , '2' , 'system:post:edit' , '15d04061-1d93-2cac-541f-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '67d5fb9c-c9bc-7a14-6070-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190001+08:00' , NULL , NULL , NULL , '100' , 'True' , '岗位删除' , '2' , 'system:post:remove' , '15d04061-1d93-2cac-541f-3a119a97612e' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '2b299e84-bf9f-0375-cf2b-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190006+08:00' , NULL , NULL , NULL , '95' , 'True' , '字典管理' , '1' , 'system:dict:list' , 'e6bf52fd-b827-33d0-b83c-3a119a97612e' , 'dict' , 'dict' , 'False' , 'True' , 'True' , NULL , 'system/dict/index' , NULL ),
 (  '92036c60-89d0-0723-c726-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190010+08:00' , NULL , NULL , NULL , '100' , 'True' , '字典查询' , '2' , 'system:dict:query' , '2b299e84-bf9f-0375-cf2b-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '44cf15f1-a7df-2cd2-9879-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190022+08:00' , NULL , NULL , NULL , '100' , 'True' , '字典新增' , '2' , 'system:dict:add' , '2b299e84-bf9f-0375-cf2b-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'b40ba258-4c8b-2dd2-721d-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190027+08:00' , NULL , NULL , NULL , '100' , 'True' , '字典修改' , '2' , 'system:dict:edit' , '2b299e84-bf9f-0375-cf2b-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'd5cb48b7-c45b-577d-d486-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190032+08:00' , NULL , NULL , NULL , '100' , 'True' , '字典删除' , '2' , 'system:dict:remove' , '2b299e84-bf9f-0375-cf2b-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '33906558-509f-1b84-782e-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190036+08:00' , NULL , NULL , NULL , '94' , 'True' , '参数设置' , '1' , 'system:config:list' , 'e6bf52fd-b827-33d0-b83c-3a119a97612e' , 'edit' , 'config' , 'False' , 'True' , 'True' , NULL , 'system/config/index' , NULL ),
 (  '611b12b5-aa91-4e34-df56-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190040+08:00' , NULL , NULL , NULL , '100' , 'True' , '参数查询' , '2' , 'system:config:query' , '33906558-509f-1b84-782e-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'b68c19fa-4cda-c1f9-2ec0-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190044+08:00' , NULL , NULL , NULL , '100' , 'True' , '参数新增' , '2' , 'system:config:add' , '33906558-509f-1b84-782e-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '169de69d-d37d-98e3-e8bd-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190049+08:00' , NULL , NULL , NULL , '100' , 'True' , '参数修改' , '2' , 'system:config:edit' , '33906558-509f-1b84-782e-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '3dc5c033-b2d4-0903-7c22-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190053+08:00' , NULL , NULL , NULL , '100' , 'True' , '参数删除' , '2' , 'system:config:remove' , '33906558-509f-1b84-782e-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '6de3fa98-b466-4ec3-a677-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190057+08:00' , NULL , NULL , NULL , '93' , 'True' , '通知公告' , '1' , 'system:notice:list' , 'e6bf52fd-b827-33d0-b83c-3a119a97612e' , 'message' , 'notice' , 'False' , 'True' , 'True' , NULL , 'system/notice/index' , NULL ),
 (  '7f7e9fe6-9627-cfa0-3948-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190061+08:00' , NULL , NULL , NULL , '100' , 'True' , '通知查询' , '2' , 'system:notice:query' , '6de3fa98-b466-4ec3-a677-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '46ed04c7-638a-b73d-b43f-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190065+08:00' , NULL , NULL , NULL , '100' , 'True' , '通知新增' , '2' , 'system:notice:add' , '6de3fa98-b466-4ec3-a677-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '7cb0901f-29b7-25cc-f12c-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190069+08:00' , NULL , NULL , NULL , '100' , 'True' , '通知修改' , '2' , 'system:notice:edit' , '6de3fa98-b466-4ec3-a677-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'd220388f-54d9-e998-cbbe-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190073+08:00' , NULL , NULL , NULL , '100' , 'True' , '通知删除' , '2' , 'system:notice:remove' , '6de3fa98-b466-4ec3-a677-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '30b5f3d7-8d0c-1acc-5888-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190078+08:00' , NULL , NULL , NULL , '92' , 'True' , '日志管理' , '0' , NULL , 'e6bf52fd-b827-33d0-b83c-3a119a97612e' , 'log' , 'log' , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'b7248673-2e90-3b7a-49ad-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190082+08:00' , NULL , NULL , NULL , '100' , 'True' , '操作日志' , '1' , 'monitor:operlog:list' , '30b5f3d7-8d0c-1acc-5888-3a119a97612f' , 'form' , 'operlog' , 'False' , 'True' , 'True' , NULL , 'monitor/operlog/index' , NULL ),
 (  'b735d213-f634-6a4d-3486-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190087+08:00' , NULL , NULL , NULL , '100' , 'True' , '操作查询' , '2' , 'monitor:operlog:query' , 'b7248673-2e90-3b7a-49ad-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '52735e27-d833-bd67-e8ad-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190091+08:00' , NULL , NULL , NULL , '100' , 'True' , '操作删除' , '2' , 'monitor:operlog:remove' , 'b7248673-2e90-3b7a-49ad-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  'f6165f45-a9c2-4abb-dc63-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190119+08:00' , NULL , NULL , NULL , '100' , 'True' , '登录日志' , '1' , 'monitor:logininfor:list' , '30b5f3d7-8d0c-1acc-5888-3a119a97612f' , 'logininfor' , 'logininfor' , 'False' , 'True' , 'True' , NULL , 'monitor/logininfor/index' , NULL ),
 (  'e7c41088-19eb-c09d-ba1d-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190124+08:00' , NULL , NULL , NULL , '100' , 'True' , '登录查询' , '2' , 'monitor:logininfor:query' , 'f6165f45-a9c2-4abb-dc63-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '92c7da78-0fd0-e308-8fc0-3a119a97612f' , 'False' , '2024-03-29T12:14:27.1190128+08:00' , NULL , NULL , NULL , '100' , 'True' , '登录删除' , '2' , 'monitor:logininfor:remove' , 'f6165f45-a9c2-4abb-dc63-3a119a97612f' , NULL , NULL , 'False' , 'False' , 'True' , NULL , NULL , NULL )
;

===============================

2024-03-29 12:14:27.132 +08:00 [DBG] =========Yi-SQL耗时5.2492毫秒=====
2024-03-29 12:14:27.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.136 +08:00 [DBG] =========Yi-SQL耗时0.8697毫秒=====
2024-03-29 12:14:27.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "post"  ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark") VALUES 
 (  'f6f6ac87-e88e-e993-408f-3a119a976141' , 'False' , '2024-03-29T12:14:27.1370273+08:00' , NULL , NULL , NULL , '100' , 'True' , 'ceo' , '董事长' , NULL ),
 (  '283e832b-289e-63d1-0665-3a119a976142' , 'False' , '2024-03-29T12:14:27.1371142+08:00' , NULL , NULL , NULL , '100' , 'True' , 'se' , '项目经理' , NULL ),
 (  '2c726f39-3e45-1f59-eb32-3a119a976142' , 'False' , '2024-03-29T12:14:27.1371145+08:00' , NULL , NULL , NULL , '100' , 'True' , 'hr' , '人力资源' , NULL ),
 (  '9a68fec9-4b76-d8d6-d239-3a119a976142' , 'False' , '2024-03-29T12:14:27.1371147+08:00' , NULL , NULL , NULL , '100' , 'True' , 'user' , '普通员工' , NULL )
;

===============================

2024-03-29 12:14:27.139 +08:00 [DBG] =========Yi-SQL耗时0.8482毫秒=====
2024-03-29 12:14:27.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.142 +08:00 [DBG] =========Yi-SQL耗时0.5897毫秒=====
2024-03-29 12:14:27.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "role"  ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state") VALUES 
 (  '3476ed9f-ffd6-04f3-c9e2-3a119a976147' , 'False' , '2024-03-29T12:14:27.1429419+08:00' , NULL , NULL , NULL , '999' , '管理员' , 'admin' , '管理员' , '0' , 'True' ),
 (  '3580f6ed-3e5e-0cb3-ee9a-3a119a976148' , 'False' , '2024-03-29T12:14:27.1430594+08:00' , NULL , NULL , NULL , '1' , '测试角色' , 'test' , '测试用的角色' , '0' , 'True' ),
 (  '516fc634-a2be-dc35-a8e4-3a119a976148' , 'False' , '2024-03-29T12:14:27.1430597+08:00' , NULL , NULL , NULL , '1' , '普通角色' , 'common' , '正常用户' , '0' , 'True' ),
 (  '3428b091-ec42-9caa-c39d-3a119a976148' , 'False' , '2024-03-29T12:14:27.1430600+08:00' , NULL , NULL , NULL , '1' , '默认角色' , 'default' , '可简单浏览' , '0' , 'True' )
;

===============================

2024-03-29 12:14:27.145 +08:00 [DBG] =========Yi-SQL耗时0.7448毫秒=====
2024-03-29 12:14:27.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.150 +08:00 [DBG] =========Yi-SQL耗时0.8891毫秒=====
2024-03-29 12:14:27.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "user"  ("id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state") VALUES 
 (  'e94b7363-80d1-10a3-eb2c-3a119a976151' , 'False' , '大橙子' , '20' , 'cc' , 'brnsRut38aRx39ovAFnN9DVLlndT5ZmPJET8TOpGSfNjX9U1CwqSnEp5DuzzMw7O9zrE6w9_xYlKttiuzJ1xfw' , 'GyW9lyIC20uRkWk+bBjTaw==' , NULL , '橙子' , '454313500@qq.com' , NULL , '深圳' , '13800000000' , '还有谁？' , '描述是什么呢？' , '0' , NULL , '2024-03-29T12:14:27.1515735+08:00' , NULL , NULL , NULL , '999' , 'True' ),
 (  'd7a9b677-bff8-c2ad-dab6-3a119a976152' , 'False' , '大测试' , '18' , 'test' , '6p-cJZUkmUh-uRfOHaI71i0tvA2xLLSBoDuM-gOgvTFvYIjo031iD0QSHCCUpKgrqFj6ze2Aq13aL0OO8yKHAw' , 'HSMOdnPoCnnLC8y6KyO6qw==' , NULL , '测试' , '454313500@qq.com' , NULL , '深圳' , '15900000000' , '还有我！' , '我没有描述！' , '1' , NULL , '2024-03-29T12:14:27.1528536+08:00' , NULL , NULL , NULL , '1' , 'True' ),
 (  'b8e9b346-a2d5-41e2-25c3-3a119a976153' , 'False' , '游客' , '18' , 'guest' , 'YsO5F7WELvswYON_zmVAxlrDLD_pZmes9zG0D4ICsrqEWnZDQhuWuDjXFmtVA98QJKnRmaSstjV3vB3o9ORDRQ' , 'L8slG/onCnYdlOfTxIun+Q==' , NULL , '测试' , '454313500@qq.com' , NULL , '深圳' , '15900000000' , '临时游客' , '懒得创账号' , '1' , NULL , '2024-03-29T12:14:27.1528667+08:00' , NULL , NULL , NULL , '1' , 'True' )
;

===============================

2024-03-29 12:14:27.159 +08:00 [DBG] =========Yi-SQL耗时4.3459毫秒=====
2024-03-29 12:14:27.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.162 +08:00 [DBG] =========Yi-SQL耗时0.7079毫秒=====
2024-03-29 12:14:27.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "banner"  ("id","name","logo","color","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime") VALUES 
 (  '76a2e9f2-63a5-2dd2-4be6-3a119a97615b' , '欢迎' , 'https://i.miji.bid/2023/12/15/e6478d5d15a4b941077e336790c414f6.png' , '' , 'False' , '2024-03-29T12:14:27.1638693+08:00' , NULL , NULL , NULL ),
 (  'f133451e-d9b5-4f0e-4728-3a119a97615c' , '前端' , 'https://i.miji.bid/2023/12/15/07e9291c9311889a31a2b433d4decca0.jpeg' , '' , 'False' , '2024-03-29T12:14:27.1646446+08:00' , NULL , NULL , NULL )
;

===============================

2024-03-29 12:14:27.165 +08:00 [DBG] =========Yi-SQL耗时0.5977毫秒=====
2024-03-29 12:14:27.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.167 +08:00 [DBG] =========Yi-SQL耗时0.4毫秒=====
2024-03-29 12:14:27.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "dictionarytype"  
           ("id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp")
     VALUES
           (N'c2d8b5e7-8b5c-bec4-054e-3a119a97615f',0,200,1,N'BBS类型标签',N'bbs_type_lable',N'BBS类型标签',CAST('2024-03-29 12:14:27.167' AS DATETIME),null,null,null,N'3bd840bd7dbb4a079153b6e7d6a10868') ;
===============================

2024-03-29 12:14:27.172 +08:00 [DBG] =========Yi-SQL耗时2.489毫秒=====
2024-03-29 12:14:27.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "dictionary"  ("id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime") VALUES 
 (  'd13cc889-782c-33f6-f56f-3a119a976164' , 'False' , '100' , 'True' , '' , NULL , NULL , 'bbs_type_lable' , '前端' , '0' , 'False' , '2024-03-29T12:14:27.1729606+08:00' , NULL , NULL , NULL ),
 (  '1a9d4062-c155-9f6e-e40a-3a119a976164' , 'False' , '99' , 'True' , '' , NULL , NULL , 'bbs_type_lable' , '后端' , '1' , 'False' , '2024-03-29T12:14:27.1730078+08:00' , NULL , NULL , NULL ),
 (  '16c3a7ce-9e7f-65cc-5409-3a119a976165' , 'False' , '98' , 'True' , '' , NULL , NULL , 'bbs_type_lable' , '运维' , '2' , 'False' , '2024-03-29T12:14:27.1730414+08:00' , NULL , NULL , NULL ),
 (  'b6bdaef9-9aa2-e164-19d6-3a119a976165' , 'False' , '97' , 'True' , '' , NULL , NULL , 'bbs_type_lable' , '测试' , '3' , 'False' , '2024-03-29T12:14:27.1730671+08:00' , NULL , NULL , NULL ),
 (  '6d69718e-3c45-4a60-1649-3a119a976165' , 'False' , '96' , 'True' , '' , NULL , NULL , 'bbs_type_lable' , 'UI' , '4' , 'False' , '2024-03-29T12:14:27.1731036+08:00' , NULL , NULL , NULL ),
 (  '44d44252-9b7b-084b-2af4-3a119a976165' , 'False' , '95' , 'True' , '' , NULL , NULL , 'bbs_type_lable' , '产品' , '5' , 'False' , '2024-03-29T12:14:27.1731398+08:00' , NULL , NULL , NULL ),
 (  'a74709c9-46b8-0f93-a1b9-3a119a976165' , 'False' , '94' , 'True' , '' , NULL , NULL , 'bbs_type_lable' , '项目' , '6' , 'False' , '2024-03-29T12:14:27.1731688+08:00' , NULL , NULL , NULL ),
 (  'd371220a-d39f-3210-ef71-3a119a976165' , 'False' , '93' , 'True' , '' , NULL , NULL , 'bbs_type_lable' , 'C#' , '7' , 'False' , '2024-03-29T12:14:27.1732033+08:00' , NULL , NULL , NULL ),
 (  '2f5d0681-2735-5ac3-708d-3a119a976165' , 'False' , '92' , 'True' , '' , NULL , NULL , 'bbs_type_lable' , '.Net' , '8' , 'False' , '2024-03-29T12:14:27.1732376+08:00' , NULL , NULL , NULL ),
 (  '53b5ca67-65d0-35d3-818a-3a119a976165' , 'False' , '91' , 'True' , '' , NULL , NULL , 'bbs_type_lable' , '.NetCore' , '9' , 'False' , '2024-03-29T12:14:27.1732665+08:00' , NULL , NULL , NULL ),
 (  '0ed340c5-0890-9f89-9194-3a119a976165' , 'False' , '90' , 'True' , '' , NULL , NULL , 'bbs_type_lable' , 'Asp.NetCore' , '10' , 'False' , '2024-03-29T12:14:27.1733050+08:00' , NULL , NULL , NULL ),
 (  '4a3672fa-82fc-f8e9-eb13-3a119a976165' , 'False' , '89' , 'True' , '' , NULL , NULL , 'bbs_type_lable' , 'Abp.vNext' , '11' , 'False' , '2024-03-29T12:14:27.1733395+08:00' , NULL , NULL , NULL )
;

===============================

2024-03-29 12:14:27.174 +08:00 [DBG] =========Yi-SQL耗时0.6274毫秒=====
2024-03-29 12:14:27.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.177 +08:00 [DBG] =========Yi-SQL耗时1.0639毫秒=====
2024-03-29 12:14:27.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "menu"  ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query") VALUES 
 (  '51121df1-70bc-842c-6592-3a119a97616a' , 'False' , '2024-03-29T12:14:27.1780936+08:00' , NULL , NULL , NULL , '91' , 'False' , 'BBS' , '0' , NULL , '00000000-0000-0000-0000-000000000000' , 'monitor' , '/bbs' , 'False' , 'False' , 'True' , NULL , NULL , NULL ),
 (  '4407719c-cf7c-9794-4af4-3a119a97616a' , 'False' , '2024-03-29T12:14:27.1780958+08:00' , NULL , NULL , NULL , '100' , 'False' , '板块管理' , '1' , 'bbs:plate:list' , '51121df1-70bc-842c-6592-3a119a97616a' , 'component' , 'plate' , 'False' , 'True' , 'True' , NULL , 'bbs/plate/index' , NULL ),
 (  '7f465c77-82f7-bf0b-59c9-3a119a97616a' , 'False' , '2024-03-29T12:14:27.1780965+08:00' , NULL , NULL , NULL , '99' , 'False' , '文章管理' , '1' , 'bbs:article:list' , '51121df1-70bc-842c-6592-3a119a97616a' , 'documentation' , 'article' , 'False' , 'True' , 'True' , NULL , 'bbs/article/index' , NULL )
;

===============================

2024-03-29 12:14:27.179 +08:00 [DBG] =========Yi-SQL耗时0.6584毫秒=====
2024-03-29 12:14:27.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.182 +08:00 [DBG] =========Yi-SQL耗时0.9388毫秒=====
2024-03-29 12:14:27.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 ) 
===============================

2024-03-29 12:14:27.185 +08:00 [DBG] =========Yi-SQL耗时0.4043毫秒=====
2024-03-29 12:14:27.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "bbsuserextrainfo"  ("id","userid","userlimit","level","money","experience","discussnumber","commentnumber","agreenumber") VALUES 
 (  '7319da95-a336-a13a-61c1-3a119a976178' , 'e94b7363-80d1-10a3-eb2c-3a119a976151' , '0' , '1' , '0' , '0' , '0' , '0' , '0' ),
 (  '829e3dcc-2514-2032-70c5-3a119a976179' , 'd7a9b677-bff8-c2ad-dab6-3a119a976152' , '0' , '1' , '0' , '0' , '0' , '0' , '0' ),
 (  '0bca53bb-cb0c-51a8-3abf-3a119a97617a' , 'b8e9b346-a2d5-41e2-25c3-3a119a976153' , '0' , '1' , '0' , '0' , '0' , '0' , '0' )
;

===============================

2024-03-29 12:14:27.196 +08:00 [DBG] =========Yi-SQL耗时1.3883毫秒=====
2024-03-29 12:14:27.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.199 +08:00 [DBG] =========Yi-SQL耗时0.7569毫秒=====
2024-03-29 12:14:27.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "config"  ("id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime") VALUES 
 (  'b5dcb5de-fe0e-8141-3d0e-3a119a976180' , '站点名称' , 'bbs.site.name' , '意社区' , NULL , '0' , NULL , 'False' , '2024-03-29T12:14:27.2005392+08:00' , NULL , NULL , NULL ),
 (  'd0e80254-bbbd-ad18-9eea-3a119a976181' , '站点作者' , 'bbs.site.author' , '橙子' , NULL , '0' , NULL , 'False' , '2024-03-29T12:14:27.2013435+08:00' , NULL , NULL , NULL ),
 (  'dfa8b62f-8d12-85c0-e7e5-3a119a976181' , '站点Icp备案' , 'bbs.site.icp' , '赣ICP备20008025号' , NULL , '0' , NULL , 'False' , '2024-03-29T12:14:27.2015534+08:00' , NULL , NULL , NULL ),
 (  '4fbea5d9-672d-5683-5b22-3a119a976181' , '站点底部信息' , 'bbs.site.bottom' , '你好世界' , NULL , '0' , NULL , 'False' , '2024-03-29T12:14:27.2016248+08:00' , NULL , NULL , NULL )
;

===============================

2024-03-29 12:14:27.202 +08:00 [DBG] =========Yi-SQL耗时0.6538毫秒=====
2024-03-29 12:14:27.204 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.205 +08:00 [DBG] =========Yi-SQL耗时0.8073毫秒=====
2024-03-29 12:14:27.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "level"  ("id","currentlevel","minexperience","name","nick","logo") VALUES 
 (  'b04f2837-5ec5-a818-9755-3a119a976186' , '1' , '10' , '小白' , NULL , NULL ),
 (  'fe8e9d2e-68e4-15d8-20db-3a119a976187' , '2' , '30' , '中白' , NULL , NULL ),
 (  'dcbc988b-2383-7d6c-f146-3a119a976187' , '3' , '100' , '大白' , NULL , NULL ),
 (  'ca03e99a-750c-253a-3eb8-3a119a976187' , '4' , '300' , '精英' , NULL , NULL ),
 (  'df751a25-f849-a3b7-0c0f-3a119a976187' , '5' , '600' , '熟练' , NULL , NULL ),
 (  'e94e0d8a-ee8c-2ece-5b95-3a119a976187' , '6' , '1000' , '高手' , NULL , NULL ),
 (  'c92c17fb-917d-3d62-5b60-3a119a976187' , '7' , '1500' , '老手' , NULL , NULL ),
 (  '536e5601-a3d7-0c79-cb2d-3a119a976187' , '8' , '2000' , '大佬' , NULL , NULL ),
 (  '7054200c-9b4e-4884-e58f-3a119a976187' , '9' , '2500' , '巨佬' , NULL , NULL ),
 (  'fba8528e-0eb6-e7ec-f98a-3a119a976187' , '10' , '3000' , '大神' , NULL , NULL )
;

===============================

2024-03-29 12:14:27.208 +08:00 [DBG] =========Yi-SQL耗时0.9097毫秒=====
2024-03-29 12:14:27.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "book"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-29 12:14:27.211 +08:00 [DBG] =========Yi-SQL耗时0.7402毫秒=====
2024-03-29 12:14:27.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "book"  
           ("id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp")
     VALUES
           (N'87976d4b-3c54-1849-5cee-3a119a97618f',N'1984',3,CAST('1949-06-08 00:00:00.000' AS DATETIME),N'19.84',null,null,CAST('2024-03-29 12:14:27.215' AS DATETIME),null,N'3953e0bde0b041d7a94241770be706ac') ;
===============================

2024-03-29 12:14:27.219 +08:00 [DBG] =========Yi-SQL耗时1.8554毫秒=====
2024-03-29 12:14:27.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "book"  
           ("id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp")
     VALUES
           (N'f69d5c5f-ceab-2338-ecf1-3a119a976194',N'The Hitchhiker''s Guide to the Galaxy',7,CAST('1995-09-27 00:00:00.000' AS DATETIME),N'42',null,null,CAST('2024-03-29 12:14:27.220' AS DATETIME),null,N'8958e5d0cdf24db3932877e41e8684b4') ;
===============================

2024-03-29 12:14:27.221 +08:00 [DBG] =========Yi-SQL耗时0.4659毫秒=====
2024-03-29 12:14:27.256 +08:00 [DBG] 耗时-1683ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-29 12:14:27.275 +08:00 [DBG] 耗时-17ms,已加载模块-Volo.Abp.AspNetCore
2024-03-29 12:14:27.341 +08:00 [DBG] 耗时-65ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-29 12:14:27.344 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-03-29 12:14:27.349 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-03-29 12:14:27.369 +08:00 [DBG] 耗时-20ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-29 12:14:27.372 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-29 12:14:27.633 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-29 12:14:27.709 +08:00 [DBG] 耗时-337ms,已加载模块-Acme.BookStore.Web
2024-03-29 12:14:27.720 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-29 12:14:27.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-03-29 12:14:27.731 +08:00 [DBG] =========Yi-SQL耗时3.3257毫秒=====
2024-03-29 12:14:31.903 +08:00 [WRN] 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
System.Exception: 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at FreeRedis.Internal.DefaultRedisSocket.Connect()
   at FreeRedis.Internal.DefaultRedisSocket.Write(CommandPacket cmd)
   at FreeRedis.RedisClient.SingleInsideAdapter.<>c__DisplayClass5_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.SingleInsideAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call(CommandPacket cmd)
   at FreeRedis.Internal.RedisClientPoolPolicy.PrevReheatConnectionPool(ObjectPool`1 pool, Int32 minPoolSize)
   --- End of inner exception stack trace ---
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.GetFree(Boolean checkAvailable)
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.Get(Nullable`1 timeout)
   at FreeRedis.RedisClient.PoolingAdapter.GetRedisSocket(CommandPacket cmd)
   at FreeRedis.RedisClient.PoolingAdapter.<>c__DisplayClass10_0`1.<<AdapterCallAsync>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at FreeRedis.RedisClient.LogCallAsync[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.DistributedCache.SetAsync(String key, Byte[] value, DistributedCacheEntryOptions options, CancellationToken token)
   at Volo.Abp.Caching.DistributedCache`2.<>c__DisplayClass51_0.<<SetAsync>g__SetRealCache|0>d.MoveNext()
2024-03-29 12:14:31.907 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-29 12:14:31.908 +08:00 [DBG] 耗时-4197ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-29 12:14:31.908 +08:00 [INF] ==========【312】个模块初始化执行完毕，总耗时【6329ms】==========
2024-03-29 12:14:32.019 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-29 12:14:32.019 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-29 12:14:32.019 +08:00 [INF] Hosting environment: Development
2024-03-29 12:14:32.019 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\sample\Acme.BookStore.Web
2024-03-29 12:15:41.564 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.TestService.GetHelloWorld (Acme.BookStore.Application)'
2024-03-29 12:15:41.582 +08:00 [INF] Route matched with {action = "GetHelloWorld", controller = "Test", area = ""}. Executing controller action with signature System.String GetHelloWorld(System.String) on controller Acme.BookStore.Application.Services.TestService (Acme.BookStore.Application).
2024-03-29 12:15:41.641 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-03-29 12:15:41.652 +08:00 [INF] Executed action Acme.BookStore.Application.Services.TestService.GetHelloWorld (Acme.BookStore.Application) in 65.5431ms
2024-03-29 12:15:41.652 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.TestService.GetHelloWorld (Acme.BookStore.Application)'
2024-03-29 12:15:41.661 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/test/hello-world
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 95
- Actions:
  - Acme.BookStore.Application.Services.TestService.GetHelloWorld (7 ms.)
    {}

2024-03-29 13:19:51.562 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-29 13:19:56.895 +08:00 [INF] Loaded ABP modules:
2024-03-29 13:19:56.895 +08:00 [INF] - Acme.BookStore.Web.YiAbpWebModule
2024-03-29 13:19:56.895 +08:00 [INF]   - Acme.BookStore.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-29 13:19:56.895 +08:00 [INF]     - Acme.BookStore.Domain.YiAbpDomainModule
2024-03-29 13:19:56.895 +08:00 [INF]       - Acme.BookStore.Domain.Shared.YiAbpDomainSharedModule
2024-03-29 13:19:56.895 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-29 13:19:56.895 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-29 13:19:56.895 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-29 13:19:56.895 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-29 13:19:56.895 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-29 13:19:56.896 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-29 13:19:56.896 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-29 13:19:56.896 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-29 13:19:56.896 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-29 13:19:56.896 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-29 13:19:56.896 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-29 13:19:56.896 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-29 13:19:56.896 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-29 13:19:56.896 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-29 13:19:56.896 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-29 13:19:56.896 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-29 13:19:56.896 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-29 13:19:56.896 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-29 13:19:56.896 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-29 13:19:56.896 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-29 13:19:56.896 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-29 13:19:56.896 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-29 13:19:56.896 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-29 13:19:56.896 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingModule
2024-03-29 13:19:56.896 +08:00 [INF]               - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-29 13:19:56.896 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-29 13:19:56.896 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-29 13:19:56.896 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Volo.Abp.Validation.AbpValidationModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-29 13:19:56.896 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-29 13:19:56.896 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-29 13:19:56.896 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-29 13:19:56.896 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-29 13:19:56.896 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-29 13:19:56.896 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-29 13:19:56.896 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-29 13:19:56.896 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-29 13:19:56.896 +08:00 [INF]   - Acme.BookStore.Application.YiAbpApplicationModule
2024-03-29 13:19:56.896 +08:00 [INF]     - Acme.BookStore.Application.Contracts.YiAbpApplicationContractsModule
2024-03-29 13:19:56.896 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-29 13:19:56.896 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-29 13:19:56.896 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-29 13:19:56.896 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-29 13:19:56.896 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-29 13:19:56.896 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-29 13:19:56.896 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-29 13:19:56.896 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-29 13:19:56.896 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-29 13:19:56.896 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-29 13:19:56.896 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-29 13:19:56.896 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-29 13:19:56.896 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-29 13:19:56.896 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-29 13:19:56.896 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-29 13:19:56.896 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-29 13:19:56.896 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-29 13:19:56.896 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-29 13:19:56.896 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-29 13:19:56.896 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-29 13:19:56.896 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-29 13:19:56.896 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-29 13:19:56.896 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-29 13:19:56.896 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-29 13:19:56.902 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-29 13:19:56.908 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-29 13:19:57.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-29 13:19:57.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-03-29 13:19:57.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-03-29 13:19:57.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-03-29 13:19:57.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-03-29 13:19:57.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-03-29 13:19:57.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-03-29 13:19:57.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-03-29 13:19:57.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-03-29 13:19:57.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-03-29 13:19:57.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-03-29 13:19:57.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-29 13:19:57.639 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-29 13:19:57.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-03-29 13:19:57.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-03-29 13:19:57.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-03-29 13:19:57.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-03-29 13:19:57.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-03-29 13:19:57.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-03-29 13:19:57.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-03-29 13:19:57.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-29 13:19:57.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-29 13:19:57.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-03-29 13:19:57.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-03-29 13:19:57.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-03-29 13:19:57.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-03-29 13:19:57.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 13:19:57.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 13:19:57.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-03-29 13:19:57.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-03-29 13:19:57.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-03-29 13:19:57.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-03-29 13:19:57.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-03-29 13:19:57.680 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-03-29 13:19:57.680 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-03-29 13:19:57.680 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-03-29 13:19:57.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.686 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-29 13:19:57.688 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.693 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-29 13:19:57.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-03-29 13:19:57.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-03-29 13:19:57.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-03-29 13:19:57.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-03-29 13:19:57.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-03-29 13:19:57.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-03-29 13:19:57.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-03-29 13:19:57.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-03-29 13:19:57.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-03-29 13:19:57.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-03-29 13:19:57.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-03-29 13:19:57.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-29 13:19:57.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.719 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.725 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-29 13:19:57.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-03-29 13:19:57.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-03-29 13:19:57.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-03-29 13:19:57.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-03-29 13:19:57.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-03-29 13:19:57.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-03-29 13:19:57.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-03-29 13:19:57.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-29 13:19:57.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.748 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-29 13:19:57.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-03-29 13:19:57.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-03-29 13:19:57.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-03-29 13:19:57.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.756 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.756 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-29 13:19:57.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-29 13:19:57.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-03-29 13:19:57.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-03-29 13:19:57.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-03-29 13:19:57.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-03-29 13:19:57.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-03-29 13:19:57.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.774 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-03-29 13:19:57.774 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:57.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-29 13:19:57.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-29 13:19:57.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-03-29 13:19:57.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-03-29 13:19:57.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-03-29 13:19:57.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-03-29 13:19:57.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 13:19:57.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 13:19:57.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-03-29 13:19:57.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-03-29 13:19:57.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-03-29 13:19:57.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-03-29 13:19:57.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-03-29 13:19:57.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-03-29 13:19:57.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-03-29 13:19:57.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-03-29 13:19:57.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-03-29 13:19:57.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-03-29 13:19:57.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-03-29 13:19:57.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-03-29 13:19:57.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-29 13:19:57.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-29 13:19:57.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-03-29 13:19:57.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-03-29 13:19:57.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-03-29 13:19:57.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-29 13:19:57.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.848 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-29 13:19:57.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-03-29 13:19:57.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-03-29 13:19:57.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-03-29 13:19:57.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-03-29 13:19:57.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 13:19:57.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 13:19:57.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-03-29 13:19:57.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-03-29 13:19:57.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-03-29 13:19:57.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-03-29 13:19:57.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-03-29 13:19:57.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-03-29 13:19:57.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-29 13:19:57.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-29 13:19:57.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-03-29 13:19:57.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-03-29 13:19:57.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-03-29 13:19:57.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-03-29 13:19:57.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-29 13:19:57.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.887 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.887 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-29 13:19:57.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-03-29 13:19:57.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-03-29 13:19:57.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-03-29 13:19:57.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-03-29 13:19:57.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 13:19:57.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 13:19:57.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-03-29 13:19:57.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-03-29 13:19:57.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-03-29 13:19:57.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-03-29 13:19:57.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-03-29 13:19:57.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-03-29 13:19:57.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-03-29 13:19:57.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-29 13:19:57.904 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.913 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-29 13:19:57.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-03-29 13:19:57.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-03-29 13:19:57.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.920 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-29 13:19:57.922 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-29 13:19:57.936 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-03-29 13:19:57.936 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-03-29 13:19:57.936 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-03-29 13:19:57.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-03-29 13:19:57.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-03-29 13:19:57.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-03-29 13:19:57.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-03-29 13:19:57.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-03-29 13:19:57.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-03-29 13:19:57.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-03-29 13:19:57.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-03-29 13:19:57.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-03-29 13:19:57.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-03-29 13:19:57.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-03-29 13:19:57.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-03-29 13:19:57.939 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-03-29 13:19:57.939 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-03-29 13:19:57.939 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-03-29 13:19:57.939 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-03-29 13:19:57.939 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 13:19:57.939 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 13:19:57.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-03-29 13:19:57.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-03-29 13:19:57.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-03-29 13:19:57.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:57.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-29 13:19:57.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-29 13:19:57.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-03-29 13:19:57.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-03-29 13:19:57.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-03-29 13:19:57.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-03-29 13:19:57.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.966 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-29 13:19:57.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-29 13:19:57.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-03-29 13:19:57.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-03-29 13:19:57.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-03-29 13:19:57.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-03-29 13:19:57.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.985 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-29 13:19:57.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:57.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:57.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:57.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-29 13:19:58.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-03-29 13:19:58.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-29 13:19:58.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.023 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-29 13:19:58.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-29 13:19:58.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.041 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-29 13:19:58.043 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-03-29 13:19:58.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-03-29 13:19:58.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-03-29 13:19:58.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-03-29 13:19:58.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-03-29 13:19:58.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-03-29 13:19:58.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-03-29 13:19:58.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-03-29 13:19:58.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-03-29 13:19:58.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:58.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-29 13:19:58.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.057 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.058 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.063 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-29 13:19:58.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.069 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.069 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-29 13:19:58.071 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-29 13:19:58.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-03-29 13:19:58.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-03-29 13:19:58.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-03-29 13:19:58.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-03-29 13:19:58.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-03-29 13:19:58.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-03-29 13:19:58.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-29 13:19:58.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.094 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-29 13:19:58.102 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-03-29 13:19:58.103 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-03-29 13:19:58.103 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-03-29 13:19:58.103 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:58.104 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.104 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.109 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.109 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-29 13:19:58.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.115 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-29 13:19:58.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-03-29 13:19:58.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-03-29 13:19:58.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:58.124 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.124 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.129 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-29 13:19:58.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-29 13:19:58.143 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-03-29 13:19:58.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:58.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:58.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:58.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-29 13:19:58.153 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.163 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-29 13:19:58.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-29 13:19:58.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.178 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.182 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-29 13:19:58.185 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-03-29 13:19:58.185 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-03-29 13:19:58.185 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:58.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:58.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.192 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-29 13:19:58.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-29 13:19:58.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-03-29 13:19:58.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-03-29 13:19:58.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-03-29 13:19:58.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:58.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:58.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 13:19:58.213 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-29 13:19:58.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-29 13:19:58.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.242 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-29 13:19:58.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.248 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.250 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-29 13:19:58.257 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-03-29 13:19:58.257 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-29 13:19:58.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-29 13:19:58.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.281 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-29 13:19:58.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.288 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.288 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-29 13:19:58.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-03-29 13:19:58.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.300 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-29 13:19:58.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-29 13:19:58.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-03-29 13:19:58.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-03-29 13:19:58.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-03-29 13:19:58.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-03-29 13:19:58.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-03-29 13:19:58.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-03-29 13:19:58.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-03-29 13:19:58.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-03-29 13:19:58.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.322 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-29 13:19:58.323 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.326 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.333 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-29 13:19:58.335 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-03-29 13:19:58.335 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-03-29 13:19:58.335 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-03-29 13:19:58.335 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-03-29 13:19:58.335 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-29 13:19:58.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 13:19:58.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('book') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('book')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Book')
===============================

2024-03-29 13:19:58.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('book') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('book')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 13:19:58.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Book')
===============================

2024-03-29 13:19:58.363 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 13:19:58.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.468 +08:00 [DBG] =========Yi-SQL耗时10.39毫秒=====
2024-03-29 13:19:58.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.484 +08:00 [DBG] =========Yi-SQL耗时1.1168毫秒=====
2024-03-29 13:19:58.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.488 +08:00 [DBG] =========Yi-SQL耗时1.0943毫秒=====
2024-03-29 13:19:58.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.495 +08:00 [DBG] =========Yi-SQL耗时2.1591毫秒=====
2024-03-29 13:19:58.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.499 +08:00 [DBG] =========Yi-SQL耗时1.1031毫秒=====
2024-03-29 13:19:58.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.503 +08:00 [DBG] =========Yi-SQL耗时1.2856毫秒=====
2024-03-29 13:19:58.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.509 +08:00 [DBG] =========Yi-SQL耗时1.1403毫秒=====
2024-03-29 13:19:58.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.512 +08:00 [DBG] =========Yi-SQL耗时1.0305毫秒=====
2024-03-29 13:19:58.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.514 +08:00 [DBG] =========Yi-SQL耗时0.4325毫秒=====
2024-03-29 13:19:58.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.518 +08:00 [DBG] =========Yi-SQL耗时0.6617毫秒=====
2024-03-29 13:19:58.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.521 +08:00 [DBG] =========Yi-SQL耗时1.6109毫秒=====
2024-03-29 13:19:58.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.525 +08:00 [DBG] =========Yi-SQL耗时0.8616毫秒=====
2024-03-29 13:19:58.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.528 +08:00 [DBG] =========Yi-SQL耗时1.0076毫秒=====
2024-03-29 13:19:58.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "book"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-29 13:19:58.533 +08:00 [DBG] =========Yi-SQL耗时1.489毫秒=====
2024-03-29 13:19:58.541 +08:00 [DBG] 耗时-1638ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-29 13:19:58.558 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-03-29 13:19:58.617 +08:00 [DBG] 耗时-58ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-29 13:19:58.620 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-03-29 13:19:58.626 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-03-29 13:19:58.647 +08:00 [DBG] 耗时-21ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-29 13:19:58.669 +08:00 [DBG] 耗时-21ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-29 13:19:58.926 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-29 13:19:59.002 +08:00 [DBG] 耗时-332ms,已加载模块-Acme.BookStore.Web
2024-03-29 13:19:59.010 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-29 13:19:59.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-03-29 13:19:59.020 +08:00 [DBG] =========Yi-SQL耗时0.8892毫秒=====
2024-03-29 13:20:03.229 +08:00 [WRN] 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
System.Exception: 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at FreeRedis.Internal.DefaultRedisSocket.Connect()
   at FreeRedis.Internal.DefaultRedisSocket.Write(CommandPacket cmd)
   at FreeRedis.RedisClient.SingleInsideAdapter.<>c__DisplayClass5_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.SingleInsideAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call(CommandPacket cmd)
   at FreeRedis.Internal.RedisClientPoolPolicy.PrevReheatConnectionPool(ObjectPool`1 pool, Int32 minPoolSize)
   --- End of inner exception stack trace ---
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.GetFree(Boolean checkAvailable)
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.Get(Nullable`1 timeout)
   at FreeRedis.RedisClient.PoolingAdapter.GetRedisSocket(CommandPacket cmd)
   at FreeRedis.RedisClient.PoolingAdapter.<>c__DisplayClass10_0`1.<<AdapterCallAsync>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at FreeRedis.RedisClient.LogCallAsync[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.DistributedCache.SetAsync(String key, Byte[] value, DistributedCacheEntryOptions options, CancellationToken token)
   at Volo.Abp.Caching.DistributedCache`2.<>c__DisplayClass51_0.<<SetAsync>g__SetRealCache|0>d.MoveNext()
2024-03-29 13:20:03.238 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-29 13:20:03.238 +08:00 [DBG] 耗时-4235ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-29 13:20:03.238 +08:00 [INF] ==========【312】个模块初始化执行完毕，总耗时【6328ms】==========
2024-03-29 13:20:03.336 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-29 13:20:03.336 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-29 13:20:03.336 +08:00 [INF] Hosting environment: Development
2024-03-29 13:20:03.336 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\sample\Acme.BookStore.Web
2024-03-29 13:21:04.511 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-29 13:21:04.536 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-29 13:21:04.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-29 13:21:04.646 +08:00 [DBG] =========Yi-SQL耗时0.7345毫秒=====
2024-03-29 13:21:04.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-29 13:21:04.653 +08:00 [DBG] =========Yi-SQL耗时0.675毫秒=====
2024-03-29 13:21:04.683 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-29 13:21:04.708 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 169.9305ms
2024-03-29 13:21:04.709 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-29 13:21:04.715 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 209
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (102 ms.)
    {"input":{"sorting":null,"skipCount":0,"maxResultCount":10}}

2024-03-29 13:40:16.653 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-29 13:40:16.661 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-29 13:40:16.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-29 13:40:16.792 +08:00 [DBG] =========Yi-SQL耗时100.2945毫秒=====
2024-03-29 13:40:16.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-29 13:40:16.795 +08:00 [DBG] =========Yi-SQL耗时1.9091毫秒=====
2024-03-29 13:40:16.799 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-29 13:40:16.804 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 143.2951ms
2024-03-29 13:40:16.804 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-29 13:40:16.806 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 152
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (124 ms.)
    {"input":{"sorting":null,"skipCount":0,"maxResultCount":10}}

2024-03-29 14:00:00.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-03-29 14:00:00.162 +08:00 [DBG] =========Yi-SQL耗时84.1638毫秒=====
2024-03-29 14:00:03.472 +08:00 [WRN] UnitOfWorkManager.Current is null! Can not publish the event.
2024-03-29 14:00:03.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "interestrecords"  
           ("id","creationtime","comparisonvalue","value","isfluctuate")
     VALUES
           (N'b002732f-ba1b-2f4b-f6ed-3a119af81087',CAST('2024-03-29 14:00:03.473' AS DATETIME),1699.91,1.3,0) ;
===============================

2024-03-29 14:00:03.511 +08:00 [DBG] =========Yi-SQL耗时12.9999毫秒=====
2024-03-29 15:22:05.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-03-29 15:22:05.559 +08:00 [DBG] =========Yi-SQL耗时132.3911毫秒=====
2024-03-29 15:22:06.532 +08:00 [WRN] UnitOfWorkManager.Current is null! Can not publish the event.
2024-03-29 15:22:06.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "interestrecords"  
           ("id","creationtime","comparisonvalue","value","isfluctuate")
     VALUES
           (N'918b6a46-adbc-3405-34b3-3a119b432f42',CAST('2024-03-29 15:22:06.533' AS DATETIME),1702.90,1.3045651535615714369604791827,0) ;
===============================

2024-03-29 15:22:06.545 +08:00 [DBG] =========Yi-SQL耗时8.6364毫秒=====
2024-03-29 16:41:27.647 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-29 16:41:32.585 +08:00 [INF] Loaded ABP modules:
2024-03-29 16:41:32.585 +08:00 [INF] - Acme.BookStore.Web.YiAbpWebModule
2024-03-29 16:41:32.585 +08:00 [INF]   - Acme.BookStore.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-29 16:41:32.585 +08:00 [INF]     - Acme.BookStore.Domain.YiAbpDomainModule
2024-03-29 16:41:32.585 +08:00 [INF]       - Acme.BookStore.Domain.Shared.YiAbpDomainSharedModule
2024-03-29 16:41:32.585 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-29 16:41:32.585 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-29 16:41:32.585 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-29 16:41:32.585 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-29 16:41:32.585 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-29 16:41:32.586 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-29 16:41:32.586 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-29 16:41:32.586 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-29 16:41:32.586 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-29 16:41:32.586 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-29 16:41:32.586 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-29 16:41:32.586 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-29 16:41:32.586 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-29 16:41:32.586 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-29 16:41:32.586 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-29 16:41:32.586 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-29 16:41:32.586 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-29 16:41:32.586 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-29 16:41:32.586 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-29 16:41:32.586 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-29 16:41:32.586 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-29 16:41:32.586 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-29 16:41:32.586 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-29 16:41:32.586 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingModule
2024-03-29 16:41:32.586 +08:00 [INF]               - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-29 16:41:32.586 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-29 16:41:32.586 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-29 16:41:32.586 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Volo.Abp.Validation.AbpValidationModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-29 16:41:32.586 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-29 16:41:32.586 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-29 16:41:32.586 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-29 16:41:32.586 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-29 16:41:32.586 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-29 16:41:32.586 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-29 16:41:32.586 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-29 16:41:32.586 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-29 16:41:32.586 +08:00 [INF]   - Acme.BookStore.Application.YiAbpApplicationModule
2024-03-29 16:41:32.586 +08:00 [INF]     - Acme.BookStore.Application.Contracts.YiAbpApplicationContractsModule
2024-03-29 16:41:32.586 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-29 16:41:32.586 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-29 16:41:32.586 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-29 16:41:32.586 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-29 16:41:32.586 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-29 16:41:32.586 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-29 16:41:32.586 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-29 16:41:32.586 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-29 16:41:32.586 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-29 16:41:32.586 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-29 16:41:32.586 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-29 16:41:32.586 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-29 16:41:32.586 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-29 16:41:32.586 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-29 16:41:32.586 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-29 16:41:32.586 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-29 16:41:32.586 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-29 16:41:32.586 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-29 16:41:32.586 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-29 16:41:32.586 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-29 16:41:32.586 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-29 16:41:32.586 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-29 16:41:32.586 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-29 16:41:32.586 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-29 16:41:32.593 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-29 16:41:32.598 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-29 16:41:33.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.292 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.334 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-29 16:41:33.338 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-03-29 16:41:33.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-03-29 16:41:33.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-03-29 16:41:33.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-03-29 16:41:33.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-03-29 16:41:33.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-03-29 16:41:33.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-03-29 16:41:33.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-03-29 16:41:33.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-03-29 16:41:33.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-03-29 16:41:33.346 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.358 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-29 16:41:33.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.366 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.374 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-29 16:41:33.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-03-29 16:41:33.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-03-29 16:41:33.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-03-29 16:41:33.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-03-29 16:41:33.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-03-29 16:41:33.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-03-29 16:41:33.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-03-29 16:41:33.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-29 16:41:33.384 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-29 16:41:33.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-03-29 16:41:33.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-03-29 16:41:33.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-03-29 16:41:33.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-03-29 16:41:33.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 16:41:33.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 16:41:33.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-03-29 16:41:33.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-03-29 16:41:33.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-03-29 16:41:33.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-03-29 16:41:33.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-03-29 16:41:33.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-03-29 16:41:33.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-03-29 16:41:33.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-03-29 16:41:33.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-29 16:41:33.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.413 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-29 16:41:33.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-03-29 16:41:33.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-03-29 16:41:33.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-03-29 16:41:33.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-03-29 16:41:33.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-03-29 16:41:33.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-03-29 16:41:33.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-03-29 16:41:33.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-03-29 16:41:33.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-03-29 16:41:33.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-03-29 16:41:33.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-03-29 16:41:33.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-29 16:41:33.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-29 16:41:33.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-03-29 16:41:33.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-03-29 16:41:33.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-03-29 16:41:33.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-03-29 16:41:33.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-03-29 16:41:33.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-03-29 16:41:33.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-03-29 16:41:33.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-29 16:41:33.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-29 16:41:33.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-03-29 16:41:33.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-03-29 16:41:33.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-03-29 16:41:33.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.479 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-29 16:41:33.480 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-29 16:41:33.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-03-29 16:41:33.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-03-29 16:41:33.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-03-29 16:41:33.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-03-29 16:41:33.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-03-29 16:41:33.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-03-29 16:41:33.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-29 16:41:33.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.523 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-29 16:41:33.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-03-29 16:41:33.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-03-29 16:41:33.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-03-29 16:41:33.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-03-29 16:41:33.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 16:41:33.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 16:41:33.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-03-29 16:41:33.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-03-29 16:41:33.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-03-29 16:41:33.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-03-29 16:41:33.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-03-29 16:41:33.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-03-29 16:41:33.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-03-29 16:41:33.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-03-29 16:41:33.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-03-29 16:41:33.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-03-29 16:41:33.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-03-29 16:41:33.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-03-29 16:41:33.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-29 16:41:33.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.548 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-29 16:41:33.557 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-03-29 16:41:33.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-03-29 16:41:33.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-03-29 16:41:33.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-29 16:41:33.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-29 16:41:33.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-03-29 16:41:33.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-03-29 16:41:33.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-03-29 16:41:33.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-03-29 16:41:33.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 16:41:33.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 16:41:33.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-03-29 16:41:33.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-03-29 16:41:33.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-03-29 16:41:33.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-03-29 16:41:33.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-03-29 16:41:33.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-03-29 16:41:33.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-29 16:41:33.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.594 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.594 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-29 16:41:33.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-03-29 16:41:33.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-03-29 16:41:33.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-03-29 16:41:33.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-03-29 16:41:33.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-29 16:41:33.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.614 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-29 16:41:33.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-03-29 16:41:33.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-03-29 16:41:33.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-03-29 16:41:33.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-03-29 16:41:33.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 16:41:33.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 16:41:33.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-03-29 16:41:33.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-03-29 16:41:33.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-03-29 16:41:33.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-03-29 16:41:33.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-03-29 16:41:33.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-03-29 16:41:33.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-03-29 16:41:33.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.633 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-29 16:41:33.635 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.640 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.645 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-29 16:41:33.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-03-29 16:41:33.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-03-29 16:41:33.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-29 16:41:33.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-29 16:41:33.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-03-29 16:41:33.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-03-29 16:41:33.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-03-29 16:41:33.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-03-29 16:41:33.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-03-29 16:41:33.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-03-29 16:41:33.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-03-29 16:41:33.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-03-29 16:41:33.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-03-29 16:41:33.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-03-29 16:41:33.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-03-29 16:41:33.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-03-29 16:41:33.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-03-29 16:41:33.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-03-29 16:41:33.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-03-29 16:41:33.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-03-29 16:41:33.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-03-29 16:41:33.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-03-29 16:41:33.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-03-29 16:41:33.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-03-29 16:41:33.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-29 16:41:33.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-03-29 16:41:33.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-03-29 16:41:33.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-03-29 16:41:33.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.677 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-29 16:41:33.686 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-29 16:41:33.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-03-29 16:41:33.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-03-29 16:41:33.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-03-29 16:41:33.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-03-29 16:41:33.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-29 16:41:33.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-29 16:41:33.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-03-29 16:41:33.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-03-29 16:41:33.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-03-29 16:41:33.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-03-29 16:41:33.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-29 16:41:33.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.730 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-29 16:41:33.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-03-29 16:41:33.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-29 16:41:33.744 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-29 16:41:33.757 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-29 16:41:33.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.768 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.768 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-29 16:41:33.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-03-29 16:41:33.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-03-29 16:41:33.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-03-29 16:41:33.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-03-29 16:41:33.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-03-29 16:41:33.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-03-29 16:41:33.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-03-29 16:41:33.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-03-29 16:41:33.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-03-29 16:41:33.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.782 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-29 16:41:33.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.789 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-29 16:41:33.796 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.796 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-29 16:41:33.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-29 16:41:33.814 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-03-29 16:41:33.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-03-29 16:41:33.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-03-29 16:41:33.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-03-29 16:41:33.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-03-29 16:41:33.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-03-29 16:41:33.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-29 16:41:33.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-29 16:41:33.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-03-29 16:41:33.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-03-29 16:41:33.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-03-29 16:41:33.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.840 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-29 16:41:33.842 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-29 16:41:33.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-03-29 16:41:33.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-03-29 16:41:33.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.855 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-29 16:41:33.888 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.893 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-29 16:41:33.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-03-29 16:41:33.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.903 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.903 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.904 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.904 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.909 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.910 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-29 16:41:33.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.921 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.921 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-29 16:41:33.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-29 16:41:33.930 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.936 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-29 16:41:33.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-03-29 16:41:33.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-03-29 16:41:33.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.944 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-29 16:41:33.952 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-29 16:41:33.966 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-03-29 16:41:33.967 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-03-29 16:41:33.967 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-03-29 16:41:33.967 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-29 16:41:33.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.975 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-29 16:41:33.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.985 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-29 16:41:33.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:33.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-29 16:41:33.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:33.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:33.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-29 16:41:34.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-03-29 16:41:34.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.010 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-29 16:41:34.012 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:34.016 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.021 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-29 16:41:34.023 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-29 16:41:34.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:34.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-29 16:41:34.041 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-03-29 16:41:34.042 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.047 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-29 16:41:34.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:34.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-29 16:41:34.063 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-03-29 16:41:34.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-03-29 16:41:34.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-03-29 16:41:34.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-03-29 16:41:34.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-03-29 16:41:34.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-03-29 16:41:34.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-03-29 16:41:34.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-03-29 16:41:34.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-29 16:41:34.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:34.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-29 16:41:34.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-03-29 16:41:34.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-03-29 16:41:34.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-03-29 16:41:34.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-03-29 16:41:34.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-29 16:41:34.094 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:34.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('book') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('book')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.105 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Book')
===============================

2024-03-29 16:41:34.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('book') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('book')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Book')
===============================

2024-03-29 16:41:34.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-29 16:41:34.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.124 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "question"(
"id" uuid NOT NULL  ,
"name" varchar(255) NOT NULL  ,
"type" int4 NOT NULL  ,
"publishdate" timestamp NOT NULL  ,
"price" float4 NOT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"concurrencystamp" varchar(255) NOT NULL   , Primary key("id"))
===============================

2024-03-29 16:41:34.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-29 16:41:34.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-03-29 16:41:34.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-29 16:41:34.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.254 +08:00 [DBG] =========Yi-SQL耗时9.4183毫秒=====
2024-03-29 16:41:34.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.267 +08:00 [DBG] =========Yi-SQL耗时0.9933毫秒=====
2024-03-29 16:41:34.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.272 +08:00 [DBG] =========Yi-SQL耗时1.4541毫秒=====
2024-03-29 16:41:34.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.279 +08:00 [DBG] =========Yi-SQL耗时3.3619毫秒=====
2024-03-29 16:41:34.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.285 +08:00 [DBG] =========Yi-SQL耗时1.3524毫秒=====
2024-03-29 16:41:34.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.291 +08:00 [DBG] =========Yi-SQL耗时1.0626毫秒=====
2024-03-29 16:41:34.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.297 +08:00 [DBG] =========Yi-SQL耗时1.41毫秒=====
2024-03-29 16:41:34.299 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.301 +08:00 [DBG] =========Yi-SQL耗时1.2194毫秒=====
2024-03-29 16:41:34.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.304 +08:00 [DBG] =========Yi-SQL耗时0.5509毫秒=====
2024-03-29 16:41:34.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.306 +08:00 [DBG] =========Yi-SQL耗时0.4149毫秒=====
2024-03-29 16:41:34.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.310 +08:00 [DBG] =========Yi-SQL耗时1.0242毫秒=====
2024-03-29 16:41:34.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.314 +08:00 [DBG] =========Yi-SQL耗时1.6079毫秒=====
2024-03-29 16:41:34.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.317 +08:00 [DBG] =========Yi-SQL耗时1.1345毫秒=====
2024-03-29 16:41:34.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "book"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.322 +08:00 [DBG] =========Yi-SQL耗时1.3124毫秒=====
2024-03-29 16:41:34.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "question"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-29 16:41:34.326 +08:00 [DBG] =========Yi-SQL耗时0.7919毫秒=====
2024-03-29 16:41:34.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp")
     VALUES
           (N'277335a3-5cad-aabc-e50b-3a119b8bef7d',N'1984',3,CAST('1949-06-08 00:00:00.000' AS DATETIME),N'19.84',null,null,CAST('2024-03-29 16:41:34.337' AS DATETIME),null,N'e0c7c6f4877b495d9584d95381a5192b') ;
===============================

2024-03-29 16:41:34.353 +08:00 [DBG] =========Yi-SQL耗时4.4602毫秒=====
2024-03-29 16:41:34.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp")
     VALUES
           (N'598c31bf-66cc-b256-1302-3a119b8bef91',N'The Hitchhiker''s Guide to the Galaxy',7,CAST('1995-09-27 00:00:00.000' AS DATETIME),N'42',null,null,CAST('2024-03-29 16:41:34.355' AS DATETIME),null,N'44f617d0dd454a82b0d1be2d0f1f3aaf') ;
===============================

2024-03-29 16:41:34.355 +08:00 [DBG] =========Yi-SQL耗时0.5426毫秒=====
2024-03-29 16:41:34.368 +08:00 [DBG] 耗时-1773ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-29 16:41:34.384 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-03-29 16:41:34.444 +08:00 [DBG] 耗时-59ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-29 16:41:34.447 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-03-29 16:41:34.452 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-03-29 16:41:34.473 +08:00 [DBG] 耗时-20ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-29 16:41:34.475 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-29 16:41:34.760 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-29 16:41:34.832 +08:00 [DBG] 耗时-357ms,已加载模块-Acme.BookStore.Web
2024-03-29 16:41:34.839 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-29 16:41:34.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-03-29 16:41:34.850 +08:00 [DBG] =========Yi-SQL耗时3.2997毫秒=====
2024-03-29 16:41:39.049 +08:00 [WRN] 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
System.Exception: 【127.0.0.1:6379/0】Status unavailable, waiting for recovery. 由于目标计算机积极拒绝，无法连接。
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at FreeRedis.Internal.DefaultRedisSocket.Connect()
   at FreeRedis.Internal.DefaultRedisSocket.Write(CommandPacket cmd)
   at FreeRedis.RedisClient.SingleInsideAdapter.<>c__DisplayClass5_0`1.<AdapterCall>b__0()
   at FreeRedis.RedisClient.LogCallCtrl[T](CommandPacket cmd, Func`1 func, Boolean aopBefore, Boolean aopAfter)
   at FreeRedis.RedisClient.LogCall[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.RedisClient.SingleInsideAdapter.AdapterCall[TValue](CommandPacket cmd, Func`2 parse)
   at FreeRedis.RedisClient.Call(CommandPacket cmd)
   at FreeRedis.Internal.RedisClientPoolPolicy.PrevReheatConnectionPool(ObjectPool`1 pool, Int32 minPoolSize)
   --- End of inner exception stack trace ---
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.GetFree(Boolean checkAvailable)
   at FreeRedis.Internal.ObjectPool.ObjectPool`1.Get(Nullable`1 timeout)
   at FreeRedis.RedisClient.PoolingAdapter.GetRedisSocket(CommandPacket cmd)
   at FreeRedis.RedisClient.PoolingAdapter.<>c__DisplayClass10_0`1.<<AdapterCallAsync>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at FreeRedis.RedisClient.LogCallAsync[T](CommandPacket cmd, Func`1 func)
   at FreeRedis.DistributedCache.SetAsync(String key, Byte[] value, DistributedCacheEntryOptions options, CancellationToken token)
   at Volo.Abp.Caching.DistributedCache`2.<>c__DisplayClass51_0.<<SetAsync>g__SetRealCache|0>d.MoveNext()
2024-03-29 16:41:39.062 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-29 16:41:39.062 +08:00 [DBG] 耗时-4229ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-29 16:41:39.063 +08:00 [INF] ==========【312】个模块初始化执行完毕，总耗时【6463ms】==========
2024-03-29 16:41:39.157 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-29 16:41:39.157 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-29 16:41:39.157 +08:00 [INF] Hosting environment: Development
2024-03-29 16:41:39.157 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\sample\Acme.BookStore.Web
2024-03-29 16:41:50.299 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-29 16:41:50.322 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.QuestionAppService (Acme.BookStore.Application).
2024-03-29 16:41:50.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-03-29 16:41:50.435 +08:00 [DBG] =========Yi-SQL耗时0.6476毫秒=====
2024-03-29 16:41:50.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-03-29 16:41:50.442 +08:00 [DBG] =========Yi-SQL耗时0.7252毫秒=====
2024-03-29 16:41:50.472 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.QuestionDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-29 16:41:50.498 +08:00 [INF] Executed action Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application) in 173.408ms
2024-03-29 16:41:50.498 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-29 16:41:50.504 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/question
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 205
- Actions:
  - Acme.BookStore.Application.Services.QuestionAppService.GetListAsync (104 ms.)
    {"input":{"sorting":null,"skipCount":0,"maxResultCount":10}}

2024-03-29 16:42:22.578 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.TestService.GetHelloWorld (Acme.BookStore.Application)'
2024-03-29 16:42:22.580 +08:00 [INF] Route matched with {action = "GetHelloWorld", controller = "Test", area = ""}. Executing controller action with signature System.String GetHelloWorld(System.String) on controller Acme.BookStore.Application.Services.TestService (Acme.BookStore.Application).
2024-03-29 16:42:22.582 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-03-29 16:42:22.582 +08:00 [INF] Executed action Acme.BookStore.Application.Services.TestService.GetHelloWorld (Acme.BookStore.Application) in 2.4731ms
2024-03-29 16:42:22.583 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.TestService.GetHelloWorld (Acme.BookStore.Application)'
2024-03-29 16:42:22.583 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/test/hello-world
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 4
- Actions:
  - Acme.BookStore.Application.Services.TestService.GetHelloWorld (0 ms.)
    {}

2024-03-29 16:55:37.997 +08:00 [INF] Executing endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-29 16:55:38.026 +08:00 [INF] Route matched with {action = "GetList", controller = "Book", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Acme.BookStore.Application.Services.BookAppService (Acme.BookStore.Application).
2024-03-29 16:55:38.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "book"  
===============================

2024-03-29 16:55:38.193 +08:00 [DBG] =========Yi-SQL耗时89.9513毫秒=====
2024-03-29 16:55:38.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","type","publishdate","price","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "book"     LIMIT 10 offset 0
===============================

2024-03-29 16:55:38.260 +08:00 [DBG] =========Yi-SQL耗时2.6056毫秒=====
2024-03-29 16:55:38.287 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Acme.BookStore.Application.Contracts.Dtos.Book.BookDto, Acme.BookStore.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-29 16:55:38.298 +08:00 [INF] Executed action Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application) in 272.2605ms
2024-03-29 16:55:38.299 +08:00 [INF] Executed endpoint 'Acme.BookStore.Application.Services.BookAppService.GetListAsync (Acme.BookStore.Application)'
2024-03-29 16:55:38.299 +08:00 [INF] AUDIT LOG: [200: GET    ] /api/app/book
- UserName - UserId                 :  - 
- ClientIpAddress        : ::1
- ExecutionDuration      : 303
- Actions:
  - Acme.BookStore.Application.Services.BookAppService.GetListAsync (222 ms.)
    {"input":{"sorting":null,"skipCount":0,"maxResultCount":10}}

2024-03-29 17:00:00.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-03-29 17:00:00.070 +08:00 [DBG] =========Yi-SQL耗时6.0937毫秒=====
2024-03-29 17:00:00.335 +08:00 [WRN] UnitOfWorkManager.Current is null! Can not publish the event.
2024-03-29 17:00:00.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "interestrecords"  
           ("id","creationtime","comparisonvalue","value","isfluctuate")
     VALUES
           (N'a4beb0c6-b122-2666-c9ba-3a119b9ccfcd',CAST('2024-03-29 17:00:00.335' AS DATETIME),1702.90,1.3045651535615714369604791827,0) ;
===============================

2024-03-29 17:00:00.346 +08:00 [DBG] =========Yi-SQL耗时8.461毫秒=====
